local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend 111Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, stateVariable)
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Unequip the tool if the toggle is off
    if not stateVariable then
        local tool = player.Character:FindFirstChild(toolName)
        if tool then
            tool.Parent = backpack  -- Move tool back to backpack if equipped
        end
    end
    
    -- Equip the tool if the toggle is on
    while stateVariable do
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
        task.wait(0.1)
    end
end

-- **Auto Equip Toggles**
local autoWeight = false
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    autoWeight = state
    autoEquipTool("Weight", autoWeight)
end)

local autoPushups = false
Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    autoPushups = state
    autoEquipTool("Pushups", autoPushups)
end)

local autoSitups = false
Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    autoSitups = state
    autoEquipTool("Sit-ups", autoSitups)
end)

local autoHandstands = false
Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    autoHandstands = state
    autoEquipTool("Handstand", autoHandstands)
end)

local autoRebirth = false
local rebirthUntilTarget = false
local targetRebirths = 0

-- Auto Rebirth Toggle
Tabs.Rebirth:AddToggle("Auto Rebirth", { Title = "Auto Rebirth", Default = false }):OnChanged(function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

-- Input Field for Target Rebirth Amount
local Input = Tabs.Rebirth:AddInput("Select Rebirth Target", {
    Title = "Select Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        targetRebirths = tonumber(Value) or 0
        print("Target rebirths set to:", targetRebirths)
    end
})

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle("Rebirth Until Target Amount", { Title = "Rebirth Until Target Amount", Default = false }):OnChanged(function(state)
    rebirthUntilTarget = state
    while rebirthUntilTarget do
        -- Get the player's leaderstats
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local currentRebirths = leaderstats:FindFirstChild("Rebirths")
            if currentRebirths then
                -- Stop when reaching the target rebirths
                if currentRebirths.Value >= targetRebirths then
                    rebirthUntilTarget = false
                    print("Target rebirth amount reached!")
                    break
                end

                -- Perform the rebirth
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end
        task.wait(0.1)
    end
end)

-- **Time Since Script Executed**
local timeSpent = 0

-- Helper function to abbreviate large numbers
local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- **Create Time Since Script Executed Paragraph**
local timeParagraph = Tabs.Stats:AddParagraph("Time Since Script Executed: 0 weeks, 0 days, 0 hours, 0 minutes, 0 seconds")

-- Function to convert total seconds into weeks, days, hours, minutes, and seconds
local function convertTime(seconds)
    local weeks = math.floor(seconds / (7 * 24 * 3600))
    seconds = seconds - weeks * 7 * 24 * 3600
    local days = math.floor(seconds / (24 * 3600))
    seconds = seconds - days * 24 * 3600
    local hours = math.floor(seconds / 3600)
    seconds = seconds - hours * 3600
    local minutes = math.floor(seconds / 60)
    seconds = seconds - minutes * 60
    return weeks, days, hours, minutes, seconds
end

-- **Function to Update Time Paragraph**
local function updateTimeParagraph()
    local weeks, days, hours, minutes, seconds = convertTime(timeSpent)
    timeParagraph.Text = string.format("Time Since Script Executed: %d weeks, %d days, %d hours, %d minutes, %d seconds", weeks, days, hours, minutes, seconds)
end

-- **Start a Loop to Update Time Every Second**
spawn(function()
    while true do
        wait(1)  -- Wait for 1 second before updating again
        timeSpent = timeSpent + 1  -- Increment the time spent by 1 second
        updateTimeParagraph()  -- Update the paragraph with the new time
    end
end)


-- **Selected Target Stats**
local playerData = {}
local selectedTarget = nil

-- **Dropdown for Selecting Target**
local targetDropdown = Tabs.Stats:AddDropdown("Select Target", {
    Title = "Select Target",
    Values = {},
    Multi = false,
    Default = nil,
    Callback = function(selected)
        selectedTarget = game.Players:FindFirstChild(selected)
        if selectedTarget then
            createPlayerParagraphs(selectedTarget)
        end
    end
})

-- **Function to Populate the Dropdown (Runs Once)**
local function populateTargetDropdown()
    local playerList = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerList, player.Name)
    end
    targetDropdown:SetValues(playerList)
end

populateTargetDropdown()

-- **Function to Create Paragraphs for Selected Player**
local function createPlayerParagraphs(player)
    -- **Clear Old Paragraphs if Switching Players**
    if playerData[player.Name] then
        for _, paragraph in pairs(playerData[player.Name]) do
            paragraph:Remove()
        end
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if not leaderstats then return end  -- Prevent errors if stats don't exist

    -- **Create Paragraphs for Player Stats**
    playerData[player.Name] = {
        StrengthParagraph = Tabs.Stats:AddParagraph("Strength: " .. abbreviateNumber(leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or 0)),
        DurabilityParagraph = Tabs.Stats:AddParagraph("Durability: " .. abbreviateNumber(player:FindFirstChild("Durability") and player.Durability.Value or 0)),
        KillsParagraph = Tabs.Stats:AddParagraph("Kills: " .. abbreviateNumber(leaderstats:FindFirstChild("Kills") and leaderstats.Kills.Value or 0)),
        BrawlsParagraph = Tabs.Stats:AddParagraph("Brawls: " .. abbreviateNumber(leaderstats:FindFirstChild("Brawls") and leaderstats.Brawls.Value or 0)),
        AgilityParagraph = Tabs.Stats:AddParagraph("Agility: " .. abbreviateNumber(player:FindFirstChild("Agility") and player.Agility.Value or 0)),
        EvilKarmaParagraph = Tabs.Stats:AddParagraph("Evil Karma: " .. abbreviateNumber(player:FindFirstChild("evilKarma") and player.evilKarma.Value or 0)),
        GoodKarmaParagraph = Tabs.Stats:AddParagraph("Good Karma: " .. abbreviateNumber(player:FindFirstChild("goodKarma") and player.goodKarma.Value or 0)),
        MapParagraph = Tabs.Stats:AddParagraph("Map: " .. (player:FindFirstChild("currentMap") and player.currentMap.Value or "N/A")),
        KingTimeParagraph = Tabs.Stats:AddParagraph("King Time: " .. abbreviateNumber(player:FindFirstChild("muscleKingTime") and player.muscleKingTime.Value or 0)),
        PremiumParagraph = Tabs.Stats:AddParagraph("Premium: " .. (player.MembershipType == Enum.MembershipType.Premium and "true" or "false"))
    }

    -- **Auto-Update Paragraphs When Stats Change**
    if leaderstats:FindFirstChild("Strength") then
        leaderstats.Strength.Changed:Connect(function()
            playerData[player.Name].StrengthParagraph.Text = "Strength: " .. abbreviateNumber(leaderstats.Strength.Value)
        end)
    end

    if leaderstats:FindFirstChild("Kills") then
        leaderstats.Kills.Changed:Connect(function()
            playerData[player.Name].KillsParagraph.Text = "Kills: " .. abbreviateNumber(leaderstats.Kills.Value)
        end)
    end

    if leaderstats:FindFirstChild("Brawls") then
        leaderstats.Brawls.Changed:Connect(function()
            playerData[player.Name].BrawlsParagraph.Text = "Brawls: " .. abbreviateNumber(leaderstats.Brawls.Value)
        end)
    end

    if player:FindFirstChild("Durability") then
        player.Durability.Changed:Connect(function()
            playerData[player.Name].DurabilityParagraph.Text = "Durability: " .. abbreviateNumber(player.Durability.Value)
        end)
    end

    if player:FindFirstChild("Agility") then
        player.Agility.Changed:Connect(function()
            playerData[player.Name].AgilityParagraph.Text = "Agility: " .. abbreviateNumber(player.Agility.Value)
        end)
    end

    if player:FindFirstChild("evilKarma") then
        player.evilKarma.Changed:Connect(function()
            playerData[player.Name].EvilKarmaParagraph.Text = "Evil Karma: " .. abbreviateNumber(player.evilKarma.Value)
        end)
    end

    if player:FindFirstChild("goodKarma") then
        player.goodKarma.Changed:Connect(function()
            playerData[player.Name].GoodKarmaParagraph.Text = "Good Karma: " .. abbreviateNumber(player.goodKarma.Value)
        end)
    end
end
