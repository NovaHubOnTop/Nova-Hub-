local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 400),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "scan-face" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "refresh-ccw" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "rbxassetid://15623956340" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "gem" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "sword" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "asterisk" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- Store toggle states
local toggleStates = {}

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, toggleName)
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Update toggle state
    if not toggleStates[toggleName] then
        toggleStates[toggleName] = false
        return
    end

    -- Create a new task for auto-equipping
    task.spawn(function()
        while toggleStates[toggleName] do
            if backpack then
                local tool = backpack:FindFirstChild(toolName)
                if tool then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
            task.wait(0.1)
        end
    end)
end

Tabs.AutoFarm:AddParagraph({ Title = "Tools", Content = "" })

-- **Auto Equip Toggles**
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Weight"] = state
    autoEquipTool("Weight", "Auto Equip Weight")
end)

Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Pushups"] = state
    autoEquipTool("Pushups", "Auto Equip Pushups")
end)

Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Situps"] = state
    autoEquipTool("Sit-ups", "Auto Equip Situps")
end)

Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Handstands"] = state
    autoEquipTool("Handstand", "Auto Equip Handstands")
end)

local player = game.Players.LocalPlayer
local leaderstats = player:FindFirstChild("leaderstats")

-- **Rebirth Stats Paragraph**
local rebirthStats = Tabs.Rebirth:AddParagraph({
    Title = "Rebirth Stats",
    Content = "Amount Of Rebirth: 0\nAmount Of Rebirth Gained In Server: 0"
})

-- **Update Rebirth Stats Every 0.1 Seconds**
task.spawn(function()
    local initialRebirths = 0
    if leaderstats then
        local rebirths = leaderstats:FindFirstChild("Rebirths")
        if rebirths then
            initialRebirths = rebirths.Value
        end
    end

    while true do
        local currentRebirths = 0
        if leaderstats then
            local rebirths = leaderstats:FindFirstChild("Rebirths")
            if rebirths then
                currentRebirths = rebirths.Value
            end
        end

        local rebirthsGained = currentRebirths - initialRebirths
        rebirthStats:SetDesc("Amount Of Rebirth: " .. currentRebirths .. "\nAmount Of Rebirth Gained In Server: " .. rebirthsGained)

        task.wait(0.1)
    end
end)

-- **Auto Rebirth Toggle**
Tabs.Rebirth:AddToggle("Auto Rebirth (Infinitely)", { Title = "Auto Rebirth (Infinitely)", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

-- **Rebirth Target Textbox**
local rebirthTargetTextbox = Tabs.Rebirth:AddInput("Rebirth Target", {
    Title = "Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirth Amount",
    Numeric = true,  -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        -- No print, just use Value as needed
    end
})

-- **Auto Rebirth Until Reach Target Amount Toggle**
Tabs.Rebirth:AddToggle("Auto Rebirth Until Reach Target Amount", { Title = "Auto Rebirth Until Reach Target Amount", Default = false }):OnChanged(function(state)
    if state then
        local targetRebirths = tonumber(rebirthTargetTextbox.Value) or 0
        task.spawn(function()
            while state do
                local currentRebirths = 0
                if leaderstats then
                    local rebirths = leaderstats:FindFirstChild("Rebirths")
                    if rebirths then
                        currentRebirths = rebirths.Value
                    end
                end
                
                if currentRebirths >= targetRebirths then
                    break
                end

                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

-- **Auto Eat Protein Egg Every 30 Minutes**
Tabs.Rebirth:AddToggle("Auto Eat Protein Egg", { Title = "Auto Eat Protein Egg Every 30 Minutes", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    local tool = backpack:FindFirstChild("Protein Egg")
                    if tool then
                        player.Character.Humanoid:EquipTool(tool)
                        task.wait(0.5)
                        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                    end
                end

                for i = 1, 1800 do
                    if not state then break end
                    task.wait(1)
                end
            end
        end)
    end
end)

-- **Eat Every Protein Egg In Inventory**
Tabs.Rebirth:AddToggle("Eat Every Protein Eggs", { Title = "Eat Every Protein Eggs In Inventory", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Protein Egg" then
                            player.Character.Humanoid:EquipTool(tool)
                            task.wait(0.5)
                            game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                        end
                    end
                end
                task.wait(1)
            end
        end)
    end
end)

-- **Hide Frame Toggle**
Tabs.Rebirth:AddToggle("Hide Frame", { Title = "Hide Frame", Default = false }):OnChanged(function(state)
    local replicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Reference the frames in ReplicatedStorage
    local strengthFrame = replicatedStorage:FindFirstChild("strengthFrame")
    local durabilityFrame = replicatedStorage:FindFirstChild("durabilityFrame")
    local agilityFrame = replicatedStorage:FindFirstChild("agilityFrame")
    
    -- If the frames exist, toggle their visibility
    if strengthFrame then
        strengthFrame.Visible = not state  -- Set to false when on, true when off
    end
    if durabilityFrame then
        durabilityFrame.Visible = not state  -- Set to false when on, true when off
    end
    if agilityFrame then
        agilityFrame.Visible = not state  -- Set to false when on, true when off
    end
end)


-- Time Since Script Executed Paragraph
local TimeSinceExecutedParagraph = Tabs.Stats:AddParagraph({
    Title = "Time Since Script Executed",
    Content = "Hours: 0 Minutes: 0 Seconds: 0"
})

-- Select Target Dropdown
local Dropdown = Tabs.Stats:AddDropdown("Select Target", {
    Title = "Select Target",
    Values = {},  -- Start with an empty list
    Multi = false,
    Default = 1,
})

-- Target Stats Paragraph
local TargetStatsParagraph = Tabs.Stats:AddParagraph({
    Title = "Target Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0",
})

-- Your Stats Paragraph
local YourStatsParagraph = Tabs.Stats:AddParagraph({
    Title = "Your Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0",
})

-- Function to abbreviate numbers for readability (K = Thousand, M = Million, B = Billion, QA = Quadrillion, T = Trillion)
local function abbreviateNumber(number)
    if number >= 1e15 then
        return string.format("%.1fQA", number / 1e15)  -- Quadrillion
    elseif number >= 1e12 then
        return string.format("%.1fT", number / 1e12)  -- Trillion
    elseif number >= 1e9 then
        return string.format("%.1fB", number / 1e9)   -- Billion
    elseif number >= 1e6 then
        return string.format("%.1fM", number / 1e6)   -- Million
    elseif number >= 1e3 then
        return string.format("%.1fK", number / 1e3)   -- Thousand
    else
        return tostring(number)  -- No abbreviation
    end
end

-- Update the "Your Stats" paragraph every 0.1 second
game:GetService("RunService").Heartbeat:Connect(function()
    local player = game.Players.LocalPlayer
    local leaderstats = player:FindFirstChild("leaderstats")
    local strength = leaderstats and leaderstats.Strength and leaderstats.Strength.Value or 0
    local durability = player:FindFirstChild("Durability") and player.Durability.Value or 0
    local agility = player:FindFirstChild("Agility") and player.Agility.Value or 0
    local kills = leaderstats and leaderstats.Kills and leaderstats.Kills.Value or 0

    -- Update the paragraph with your current stats using SetDesc
    if YourStatsParagraph then
        YourStatsParagraph:SetDesc(string.format([[
            Amount Of Strength: %s
            Amount Of Durability: %s
            Amount Of Agility: %s
            Amount Of Kills: %s
        ]], abbreviateNumber(strength), abbreviateNumber(durability), abbreviateNumber(agility), abbreviateNumber(kills)))
    end
end)

-- Function to update the dropdown with player names
local function updateDropdown()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end

    -- Safely set values if the dropdown allows it
    if Dropdown and Dropdown.SetValues then
        Dropdown:SetValues(playerNames)
    else
        warn("Dropdown:SetValues method not available")
    end

    -- Set the default to the first player in the list (if any)
    if #playerNames > 0 then
        Dropdown:SetValue(playerNames[1])  -- Update the value
    else
        Dropdown:SetValue("")  -- No players in game
    end
end

-- Call updateDropdown whenever players join/leave
game.Players.PlayerAdded:Connect(updateDropdown)
game.Players.PlayerRemoving:Connect(updateDropdown)

-- Handle dropdown changes
Dropdown:OnChanged(function(selectedPlayerName)
    -- Find the selected player
    local selectedPlayer = game.Players:FindFirstChild(selectedPlayerName)
    if selectedPlayer then
        -- Retrieve the player's leaderstats
        local leaderstats = selectedPlayer:FindFirstChild("leaderstats")
        local strength = leaderstats and leaderstats.Strength and leaderstats.Strength.Value or 0
        local durability = selectedPlayer:FindFirstChild("Durability") and selectedPlayer.Durability.Value or 0
        local agility = selectedPlayer:FindFirstChild("Agility") and selectedPlayer.Agility.Value or 0
        local kills = leaderstats and leaderstats.Kills and leaderstats.Kills.Value or 0

        -- Safely update the paragraph with the player's stats using SetDesc
        if TargetStatsParagraph then
            TargetStatsParagraph:SetDesc(string.format([[
                Amount Of Strength: %s
                Amount Of Durability: %s
                Amount Of Agility: %s
                Amount Of Kills: %s
            ]], abbreviateNumber(strength), abbreviateNumber(durability), abbreviateNumber(agility), abbreviateNumber(kills)))
        end
    else
        -- If player doesn't exist, set stats to 0
        if TargetStatsParagraph then
            TargetStatsParagraph:SetDesc("Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0")
        end
    end
end)

-- Initial population of the dropdown when the script runs
updateDropdown()

-- Timer for Stats Tab
local startTime = tick() -- Store the time when the script starts executing

-- Function to convert total seconds into hours, minutes, and seconds
local function convertTime(seconds)
    local hours = math.floor(seconds / 3600)
    seconds = seconds - hours * 3600
    local minutes = math.floor(seconds / 60)
    seconds = seconds - minutes * 60
    return hours, minutes, seconds
end

-- Function to update the time since script execution
local function updateTimeSinceExecuted()
    local elapsedTime = tick() - startTime
    local hours, minutes, seconds = convertTime(elapsedTime)

    -- Update the Time Since Script Executed paragraph content
    if TimeSinceExecutedParagraph then
        TimeSinceExecutedParagraph:SetDesc(string.format(
            "Hours: %d Minutes: %d Seconds: %d",
            hours, minutes, seconds
        ))
    end
end

task.spawn(function()
    while true do
        updateTimeSinceExecuted()
        task.wait(1)
    end
end)

local Toggle = Tabs.Killing:AddToggle("Auto Kill", {Title = "Auto Kill", Default = false })

Toggle:OnChanged(function(bool)
    if bool then
        -- Start the kill aura when toggle is enabled
        local player = game.Players.LocalPlayer
        local playerName = player.Name
        _G.autoPunchanim = true -- Global control variable

        while _G.autoPunchanim do
            local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
            
            if punchTool then
                -- Ensure the tool is equipped
                if punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName)
                end

                -- Fire the punch event for the player's own hands
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                -- Iterate over all players in the game
                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player then
                        local targetCharacter = targetPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            local rightHand = player.Character:FindFirstChild("RightHand")
                            local leftHand = player.Character:FindFirstChild("LeftHand")
                            local touchPart = targetCharacter.HumanoidRootPart

                            -- Right Hand attack
                            if rightHand then
                                firetouchinterest(rightHand, touchPart, 0)
                                wait(0.1)
                                firetouchinterest(rightHand, touchPart, 1)
                            end

                            -- Left Hand attack
                            if leftHand then
                                firetouchinterest(leftHand, touchPart, 0)
                                wait(0.1)
                                firetouchinterest(leftHand, touchPart, 1)
                            end
                        end
                    end
                end
            else
                _G.autoPunchanim = false -- Stop the loop if tool is not found
            end
            wait(0.1) -- Adjust the timing to avoid overloading server with too many hits
        end
    else
        -- Stop the kill aura when toggle is disabled
        _G.autoPunchanim = false
    end
end)
