-- Whitelist for specific usernames 
local whitelistedUsers = {
   "Mrbignewcoming3",
   "Hi_dorihi"  -- Whitelisted users
}

-- Function to check if a player is whitelisted
local function isWhitelisted(username)
   for _, whitelisted in ipairs(whitelistedUsers) do
       if username == whitelisted then
           return true
       end
   end
   return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
if not isWhitelisted(player.Name) then
   player:Kick("Not WhiteListed L")
   return
end

-- Load GUI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/muscle-legend-lite-hub-elerium-library-/refs/heads/main/library", true))()
local window = library:AddWindow("Nova Hub V1 Free Version | Encrypted Script", {
    main_color = Color3.fromRGB(75,0,130),
    min_size = Vector2.new(700, 640),
    can_resize = false,
})

-- Killing Tab
local Killing = window:AddTab("Killing")
Killing:AddLabel("Whitelisting")

_G.whitelist = {}

Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")

-- Auto Kill Toggle
_G.autoKill = false

local autoKillToggle = Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state

    if state then
        task.spawn(function()
            while _G.autoKill do
                local character = player.Character or player.CharacterAdded:Wait()
                local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

                if punchTool and punchTool.Parent ~= character then
                    punchTool.Parent = character
                end

                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")

                for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player and not _G.whitelist[targetPlayer.Name] then
                        local targetCharacter = targetPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            firetouchinterest(character.RightHand, targetCharacter.HumanoidRootPart, 1)
                            firetouchinterest(character.LeftHand, targetCharacter.HumanoidRootPart, 1)
                            wait(0.1)
                            firetouchinterest(character.RightHand, targetCharacter.HumanoidRootPart, 0)
                            firetouchinterest(character.LeftHand, targetCharacter.HumanoidRootPart, 0)
                        end
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

-- Auto Punching
local function equipPunchTool()
    local punchTool = player.Backpack:FindFirstChild("Punch")
    if punchTool then
        punchTool.Parent = player.Character
    end
end

local function punchAction()
    player.muscleEvent:FireServer("punch", "rightHand")
    player.muscleEvent:FireServer("punch", "leftHand")
end

local autoPunchanim = false
Killing:AddSwitch("Auto Punch [No Animation]", function(state)
    autoPunchanim = state
    if state then
        task.spawn(function()
            while autoPunchanim do
                equipPunchTool()
                punchAction()
                wait(0.1)
            end
        end)
    end
end)

-- Player Tab
local PlayerTab = window:AddTab("Player")
PlayerTab:AddLabel("Spying")

local selectedSpyTarget = nil
local spyDropdown = PlayerTab:AddDropdown("Select Player", function(playerName)
    selectedSpyTarget = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        spyDropdown:Add(p.Name)
    end
end

_G.spyActive = false
local function updateCamera(targetPlayer)
    local camera = game.Workspace.CurrentCamera

    while _G.spyActive and targetPlayer do
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local humanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            camera.CameraSubject = humanoidRootPart
        end
        targetPlayer.CharacterAdded:Wait()
    end

    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
end

PlayerTab:AddSwitch("Spy Player", function(state)
    _G.spyActive = state
    local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
    if state and targetPlayer then
        task.spawn(updateCamera, targetPlayer)
    end
end)

PlayerTab:AddButton("Teleport to player", function()
    if selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer and targetPlayer.Character then
            local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                player.Character:SetPrimaryPartCFrame(targetHRP.CFrame)
            end
        end
    else
        warn("No player selected!")
    end
end)

PlayerTab:AddLabel("View Stats")

local playerData = {}

local function abbreviateNumber(value)
    if value >= 1e15 then return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then return string.format("%.1fK", value / 1e3)
    else return tostring(value)
    end
end

local function createPlayerLabels(targetPlayer)
    local leaderstats = targetPlayer:FindFirstChild("leaderstats")
    if not leaderstats then return end

    local labels = {
        StrengthLabel = PlayerTab:AddLabel("Strength: " .. abbreviateNumber(leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or 0)),
        KillsLabel = PlayerTab:AddLabel("Kills: " .. abbreviateNumber(leaderstats:FindFirstChild("Kills") and leaderstats.Kills.Value or 0)),
    }

    playerData[targetPlayer.Name] = labels
end

local selectedPlayerName = nil
PlayerTab:AddTextBox("Player Name", function(playerName)
    selectedPlayerName = playerName
    local targetPlayer = game.Players:FindFirstChild(playerName)

    if targetPlayer then
        createPlayerLabels(targetPlayer)
    else
        PlayerTab:AddLabel("Player not found!")
    end
end)
