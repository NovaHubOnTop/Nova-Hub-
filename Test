-- Whitelist for specific usernames 
local whitelistedUsers = {
    "Mrbignewcoming3",
    "Hi_dorihi"
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
    for _, whitelisted in ipairs(whitelistedUsers) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Kick the player if they are not whitelisted
if not isWhitelisted(username) then
    game.Players.LocalPlayer:Kick("Not WhiteListed L")
    return
end

-- Load Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/muscle-legend-lite-hub-elerium-library-/refs/heads/main/library", true))()

local window = library:AddWindow("Nova Hub V1 Free Version | Encrypted Script", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(700, 640),
    can_resize = false
})

-- Killing Tab
local Killing = window:AddTab("Killing")
Killing:AddLabel("Whitelisting")

_G.whitelist = {}

Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")

-- Auto Kill Toggle
_G.autoKill = false

local function punch()
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
end

local function autoKillLoop()
    while _G.autoKill do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

        if punchTool and punchTool.Parent ~= character then
            punchTool.Parent = character
        end

        punch()

        for _, targetPlayer in pairs(game.Players:GetPlayers()) do
            if targetPlayer ~= player and not _G.whitelist[targetPlayer.Name] then
                local targetCharacter = targetPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    firetouchinterest(character.RightHand, targetCharacter.HumanoidRootPart, 1)
                    firetouchinterest(character.LeftHand, targetCharacter.HumanoidRootPart, 1)
                    wait(0.1)
                    firetouchinterest(character.RightHand, targetCharacter.HumanoidRootPart, 0)
                    firetouchinterest(character.LeftHand, targetCharacter.HumanoidRootPart, 0)
                end
            end
        end
        wait(0.1)
    end
end

Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state
    if state then
        task.spawn(autoKillLoop)
    end
end)

Killing:AddLabel("Targeting")

-- Spy Player Feature
local PlayerTab = window:AddTab("Player")
PlayerTab:AddLabel("Spying")

local selectedSpyTarget = nil
local spyDropdown = PlayerTab:AddDropdown("Select Player", function(playerName)
    selectedSpyTarget = playerName
end)

for _, player in ipairs(game.Players:GetPlayers()) do
    if player.Name ~= game.Players.LocalPlayer.Name then
        spyDropdown:Add(player.Name)
    end
end

_G.spyActive = false

local function updateCamera(targetPlayer)
    local localPlayer = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera

    while _G.spyActive and targetPlayer do
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local humanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            camera.CameraSubject = humanoidRootPart
        end

        targetPlayer.CharacterAdded:Wait()
    end

    -- Reset camera when spying is turned off
    camera.CameraSubject = localPlayer.Character:FindFirstChild("Humanoid")
end

PlayerTab:AddSwitch("Spy Player", function(state)
    _G.spyActive = state

    if state and selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer then
            task.spawn(updateCamera, targetPlayer)
        end
    else
        -- Reset camera when turned off
        game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    end
end)
