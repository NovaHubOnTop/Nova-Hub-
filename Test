local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend 111Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, stateVariable)
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Unequip the tool if the toggle is off
    if not stateVariable then
        local tool = player.Character:FindFirstChild(toolName)
        if tool then
            tool.Parent = backpack  -- Move tool back to backpack if equipped
        end
    end
    
    -- Equip the tool if the toggle is on
    while stateVariable do
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
        task.wait(0.1)
    end
end

-- **Auto Equip Toggles**
local autoWeight = false
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    autoWeight = state
    autoEquipTool("Weight", autoWeight)
end)

local autoPushups = false
Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    autoPushups = state
    autoEquipTool("Pushups", autoPushups)
end)

local autoSitups = false
Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    autoSitups = state
    autoEquipTool("Sit-ups", autoSitups)
end)

local autoHandstands = false
Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    autoHandstands = state
    autoEquipTool("Handstand", autoHandstands)
end)

local autoRebirth = false
local rebirthUntilTarget = false
local targetRebirths = 0

-- Auto Rebirth Toggle
Tabs.Rebirth:AddToggle("Auto Rebirth", { Title = "Auto Rebirth", Default = false }):OnChanged(function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

-- Input Field for Target Rebirth Amount
local Input = Tabs.Rebirth:AddInput("Select Rebirth Target", {
    Title = "Select Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        targetRebirths = tonumber(Value) or 0
        print("Target rebirths set to:", targetRebirths)
    end
})

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle("Rebirth Until Target Amount", { Title = "Rebirth Until Target Amount", Default = false }):OnChanged(function(state)
    rebirthUntilTarget = state
    while rebirthUntilTarget do
        -- Get the player's leaderstats
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local currentRebirths = leaderstats:FindFirstChild("Rebirths")
            if currentRebirths then
                -- Stop when reaching the target rebirths
                if currentRebirths.Value >= targetRebirths then
                    rebirthUntilTarget = false
                    print("Target rebirth amount reached!")
                    break
                end

                -- Perform the rebirth
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end
        task.wait(0.1)
    end
end)

-- **Time Since Script Executed Paragraph**
local scriptStartTime = os.time()
local scriptExecutionLabel = Tabs.Stats:AddParagraph({
    Title = "Time Since Script Executed",
    Content = "00:00"
})

local function updateScriptExecutionTime()
    local elapsed = os.time() - scriptStartTime
    local minutes = math.floor(elapsed / 60)
    local seconds = elapsed % 60
    scriptExecutionLabel:Set({ Content = string.format("%02d:%02d", minutes, seconds) })
end

task.spawn(function()
    while true do
        updateScriptExecutionTime()
        task.wait(1)
    end
end)

-- **Timer Paragraph**
local timerLabel = Tabs.Stats:AddParagraph({
    Title = "Timer",
    Content = "00:00"
})
local timerRunning = false
local timerStartTime = 0

local function updateTimer()
    if timerRunning then
        local elapsed = os.time() - timerStartTime
        local minutes = math.floor(elapsed / 60)
        local seconds = elapsed % 60
        timerLabel:Set({ Content = string.format("%02d:%02d", minutes, seconds) })
    end
end

task.spawn(function()
    while true do
        updateTimer()
        task.wait(1)
    end
end)

-- **Start Timer Button**
Tabs.Stats:AddButton({
    Title = "Start Timer",
    Callback = function()
        if not timerRunning then
            timerRunning = true
            timerStartTime = os.time()
        end
    end
})

-- **Stop Timer Button**
Tabs.Stats:AddButton({
    Title = "Stop Timer",
    Callback = function()
        timerRunning = false
        timerLabel:Set({ Content = "00:00" })
    end
})

-- **Select Target Dropdown**
local selectedTarget = nil  
local targetDropdown = Tabs.Stats:AddDropdown("Select Target", {
    Title = "Select Target",
    Values = {},  
    Multi = false,
    Default = nil,
    Callback = function(selected)
        selectedTarget = game.Players:FindFirstChild(selected)
        updateTargetStats(selectedTarget) 
    end
})

-- **Function to Update Dropdown List (Runs Once)**
local function populateTargetDropdown()
    local playerList = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerList, player.Name)
    end
    targetDropdown:SetValues(playerList)
end

populateTargetDropdown()  

-- **Track Selected Target's Stats Paragraph**
local targetStatsLabel = Tabs.Stats:AddParagraph({
    Title = "Selected Target Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nGood Karma: 0\nBad Karma: 0"
})

local function updateTargetStats(player)
    local statsText = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nGood Karma: 0\nBad Karma: 0"

    if player then
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local strength = leaderstats:FindFirstChild("Strength")
            local durability = player:FindFirstChild("Durability")
            local agility = player:FindFirstChild("Agility")
            local kills = leaderstats:FindFirstChild("Kills")
            local goodKarma = player:FindFirstChild("goodKarma")
            local evilKarma = player:FindFirstChild("evilKarma")

            statsText = string.format(
                "Amount Of Strength: %s\nAmount Of Durability: %s\nAmount Of Agility: %s\nAmount Of Kill: %s\nGood Karma: %s\nBad Karma: %s",
                abbreviateNumber(strength and strength.Value or 0),
                abbreviateNumber(durability and durability.Value or 0),
                abbreviateNumber(agility and agility.Value or 0),
                abbreviateNumber(kills and kills.Value or 0),
                abbreviateNumber(goodKarma and goodKarma.Value or 0),
                abbreviateNumber(evilKarma and evilKarma.Value or 0)
            )
        end
    end

    targetStatsLabel:Set({ Content = statsText })
end

-- **Auto-Update Selected Target's Stats**
task.spawn(function()
    while true do
        if selectedTarget then
            updateTargetStats(selectedTarget)
        end
        task.wait(1)
    end
end)
