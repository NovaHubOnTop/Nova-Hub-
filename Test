-- Whitelist for specific usernames
local whitelistedUsers = {
    "Mrbignewcoming3",
    "Hi_dorihi",
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
    for _, whitelisted in ipairs(whitelistedUsers) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Kick the player if they are not whitelisted
if not isWhitelisted(username) then
    player:Kick("Not WhiteListed L")
    return
end

-- Load UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/muscle-legend-lite-hub-elerium-library-/refs/heads/main/library", true))()

local window = library:AddWindow("Nova Hub V1 Free Version | Encrypted Script", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(700, 640),
    can_resize = false,
})

-- Killing Tab
local Killing = window:AddTab("Killing")

-- Whitelist System
Killing:AddLabel("Whitelisting")

_G.whitelist = {}

Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")

-- Function to equip Punch tool
local function equipPunchTool()
    local character = player.Character or player.CharacterAdded:Wait()
    local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

    if punchTool and punchTool.Parent ~= character then
        punchTool.Parent = character
    end
end

-- Function to execute punch actions
local function punchAction()
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
end

-- Auto Kill Toggle
_G.autoKill = false

Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state

    if state then
        task.spawn(function()
            while _G.autoKill do
                equipPunchTool()
                punchAction()

                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player and not _G.whitelist[targetPlayer.Name] then
                        local targetCharacter = targetPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 1)
                            firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 1)
                            task.wait(0.1)
                            firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 0)
                            firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 0)
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end)

Killing:AddLabel("Targeting")

-- Select Target Dropdown (does not update dynamically)
local selectedTargetName = nil
local dropdown = Killing:AddDropdown("Select Target", function(playerName)
    selectedTargetName = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        dropdown:Add(p.Name)
    end
end

-- Kill Target Toggle
_G.killTargetActive = false

Killing:AddSwitch("Kill Target", function(state)
    _G.killTargetActive = state

    if state and selectedTargetName then
        task.spawn(function()
            while _G.killTargetActive do
                equipPunchTool()
                punchAction()

                local targetPlayer = game.Players:FindFirstChild(selectedTargetName)
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    firetouchinterest(player.Character.RightHand, targetPlayer.Character.HumanoidRootPart, 1)
                    firetouchinterest(player.Character.LeftHand, targetPlayer.Character.HumanoidRootPart, 1)
                    task.wait(0.1)
                    firetouchinterest(player.Character.RightHand, targetPlayer.Character.HumanoidRootPart, 0)
                    firetouchinterest(player.Character.LeftHand, targetPlayer.Character.HumanoidRootPart, 0)
                end
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Punch Toggle
_G.AutoPunch = false

Killing:AddSwitch("Auto Punch", function(state)
    _G.AutoPunch = state

    if state then
        task.spawn(function()
            while _G.AutoPunch do
                equipPunchTool()
                punchAction()
                task.wait(0.1)
            end
        end)
    end
end)

-- Auto Equip Punch
_G.AutoEquipPunch = false

Killing:AddSwitch("Auto Equip Punch", function(state)
    _G.AutoEquipPunch = state

    if state then
        task.spawn(function()
            while _G.AutoEquipPunch do
                equipPunchTool()
                task.wait(0.1)
            end
        end)
    end
end)

-- Player Tab for Spying
local PlayerTab = window:AddTab("Player")

PlayerTab:AddLabel("Spying")

-- Select Player Dropdown (does not update dynamically)
local selectedSpyTarget = nil
local spyDropdown = PlayerTab:AddDropdown("Select Player", function(playerName)
    selectedSpyTarget = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        spyDropdown:Add(p.Name)
    end
end

_G.spyActive = false

local function updateCamera(targetPlayer)
    local camera = game.Workspace.CurrentCamera

    while _G.spyActive and targetPlayer do
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local humanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            camera.CameraSubject = humanoidRootPart
        end

        targetPlayer.CharacterAdded:Wait()
    end

    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
end

PlayerTab:AddSwitch("Spy Player", function(state)
    _G.spyActive = state

    if state and selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer then
            task.spawn(updateCamera, targetPlayer)
        end
    end
end)

-- Teleport to Selected Player
PlayerTab:AddButton("Teleport to Player", function()
    if selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer and targetPlayer.Character then
            local targetRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetRootPart then
                player.Character:SetPrimaryPartCFrame(targetRootPart.CFrame)
            end
        end
    else
        warn("No player selected!")
    end
end)
