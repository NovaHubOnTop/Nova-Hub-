local whitelistedUsers = {
    "Mrbignewcoming3",
    "Hi_dorihi"
}

local function isWhitelisted(username)
    for _, whitelisted in ipairs(whitelistedUsers) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

local player = game.Players.LocalPlayer
if not isWhitelisted(player.Name) then
    player:Kick("Not WhiteListed L")
    return
end

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/muscle-legend-lite-hub-elerium-library-/refs/heads/main/library", true))()
local window = library:AddWindow("Nova Hub V1 Paid Version | Encrypted Script", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(700, 640),
    can_resize = false
})

local Killing = window:AddTab("Killing")
Killing:AddLabel("Whitelisting")

_G.whitelist = {}
Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")

-- Auto Kill Toggle
_G.autoKill = false
Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state
    if state then
        task.spawn(function()
            while _G.autoKill do
                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player and not _G.whitelist[targetPlayer.Name] then
                        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 1)
                            firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 1)
                            task.wait(0.5)
                            firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 0)
                            firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 0)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end
end)

-- Targeting
local selectedTargetName = nil
local dropdown = Killing:AddDropdown("Select Target", function(playerName)
    selectedTargetName = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        dropdown:Add(p.Name)
    end
end

-- Kill Target Toggle
_G.killTargetActive = false
Killing:AddSwitch("Kill Target", function(state)
    _G.killTargetActive = state
    if state then
        task.spawn(function()
            while _G.killTargetActive do
                local targetPlayer = game.Players:FindFirstChild(selectedTargetName)
                if targetPlayer then
                    local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
                    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                        firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 1)
                        firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 1)
                        task.wait(0.5)
                        firetouchinterest(player.Character.RightHand, targetCharacter.HumanoidRootPart, 0)
                        firetouchinterest(player.Character.LeftHand, targetCharacter.HumanoidRootPart, 0)
                    end
                end
                task.wait(0.5)
            end
        end)
    end
end)

-- Monitor player movement
local function onPlayerMove(player)
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        -- Detect movement by checking if HumanoidRootPart position changes
        local lastPosition = humanoidRootPart.Position
        while true do
            if humanoidRootPart.Position ~= lastPosition then
                lastPosition = humanoidRootPart.Position
                -- Trigger firetouchinterest when player moves
                if not _G.whitelist[player.Name] then
                    firetouchinterest(player.Character.RightHand, humanoidRootPart, 1)
                    firetouchinterest(player.Character.LeftHand, humanoidRootPart, 1)
                    task.wait(0.5)
                    firetouchinterest(player.Character.RightHand, humanoidRootPart, 0)
                    firetouchinterest(player.Character.LeftHand, humanoidRootPart, 0)
                end
            end
            task.wait(0.5)
        end
    end
end

-- Monitor death and respawn
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        -- Fire touch interest when the player respawns
        task.spawn(function()
            while true do
                -- Give the character time to load
                task.wait(1)
                if character:FindFirstChild("HumanoidRootPart") then
                    firetouchinterest(player.Character.RightHand, character.HumanoidRootPart, 1)
                    firetouchinterest(player.Character.LeftHand, character.HumanoidRootPart, 1)
                    task.wait(0.5)
                    firetouchinterest(player.Character.RightHand, character.HumanoidRootPart, 0)
                    firetouchinterest(player.Character.LeftHand, character.HumanoidRootPart, 0)
                end
            end
        end)
    end)
end)

-- Enable movement detection for all players
for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        task.spawn(onPlayerMove, player)
    end
end

game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        task.spawn(onPlayerMove, player)
    end
end)

-- Player Tab for Spying and Teleporting
local PlayerTab = window:AddTab("Player")
PlayerTab:AddLabel("Spying")

local selectedSpyTarget = nil
local spyDropdown = PlayerTab:AddDropdown("Select Player", function(playerName)
    selectedSpyTarget = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        spyDropdown:Add(p.Name)
    end
end

_G.spyActive = false
local function updateCamera(targetPlayer)
    local camera = game.Workspace.CurrentCamera
    while _G.spyActive and targetPlayer do
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local humanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            camera.CameraSubject = humanoidRootPart
        end
        task.wait(0.5)
    end
    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
end

PlayerTab:AddSwitch("Spy Player", function(state)
    _G.spyActive = state
    if state and selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer then
            task.spawn(updateCamera, targetPlayer)
        end
    else
        game.Workspace.CurrentCamera.CameraSubject = player.Character:FindFirstChild("Humanoid")
    end
end)

PlayerTab:AddButton("Teleport to player", function()
    if selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer and targetPlayer.Character then
            local targetHumanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetHumanoidRootPart then
                player.Character:SetPrimaryPartCFrame(targetHumanoidRootPart.CFrame)
            end
        end
    end
end)
