local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()

local window = library:AddWindow("BLX Clan Script | Made By Encrypted", {
	main_color = Color3.fromRGB(194, 218, 184), -- Color
	min_size = Vector2.new(250, 346), -- Size of the gui
	can_resize = false, -- true or false
})

local OPtab = window:AddTab("OP Things") 
local OP_Auto_Rebirth_Enabled = false
local RebirthTarget = 0  -- Default target

-- Textbox to choose the rebirth target
OPtab:AddTextBox("Chose Rebirth Target", function(text)
    local target = tonumber(text)
    if target then
        RebirthTarget = target
    end
end)

-- Toggle for Auto Rebirth
local switch = OPtab:AddSwitch("Auto Rebirth (Normal Auto Rebirth)", function(bool)
    OP_Auto_Rebirth_Enabled = bool

    if bool then
        local player = game:GetService("Players").LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")

        -- Teleport to the target position
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-8652.867, 29.2667, 2089.261)
        end

        -- Machine interaction loop
        task.spawn(function()
            while OP_Auto_Rebirth_Enabled do
                local args = {
                    [1] = "useMachine",
                    [2] = workspace:WaitForChild("machinesFolder"):WaitForChild("Jungle Bar Lift"):WaitForChild("interactSeat")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("machineInteractRemote"):InvokeServer(unpack(args))
                task.wait(0.5)  -- Prevents overloading the server
            end
        end)

        -- Muscle event loop
        task.spawn(function()
            while OP_Auto_Rebirth_Enabled do
                local args = { [1] = "rep" }
                game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args))
                task.wait(0.1)
            end
        end)

        -- Rebirth loop
        task.spawn(function()
            while OP_Auto_Rebirth_Enabled do
                if leaderstats and leaderstats:FindFirstChild("Rebirths") then
                    local currentRebirths = leaderstats.Rebirths.Value
                    if currentRebirths < RebirthTarget then
                        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                    else
                        OP_Auto_Rebirth_Enabled = false  -- Stop once the target is reached
                    end
                end
                task.wait(1)  -- Check rebirth count every second
            end
        end)
    end
end)

local OP_AutoRebirth = false -- Toggle state

-- Toggle creation
local switch = OPtab:AddSwitch("OP Auto Rebirth (Packs Needed)", function(bool)
    OP_AutoRebirth = bool
    if bool then
        task.spawn(AutoRebirthLoop)
    end
end)

-- Function to equip 8 pets
local function EquipPets(petName)
    for i = 1, 8 do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique[petName])
    end
end

-- Function to unequip 8 pets
local function UnequipPets(petName)
    for i = 1, 8 do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique[petName])
    end
end

-- Function to get current strength
local function GetStrength()
    local leaderstats = game:GetService("Players").LocalPlayer:FindFirstChild("leaderstats")
    return leaderstats and leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or 0
end

-- Function to get current rebirths
local function GetRebirths()
    local leaderstats = game:GetService("Players").LocalPlayer:FindFirstChild("leaderstats")
    return leaderstats and leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or 0
end

-- Strength farming loop
function AutoRebirthLoop()
    EquipPets("Swift Samurai") -- Equip Swift Samurai at the start

    while OP_AutoRebirth do
        -- Fire strength event as fast as possible
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.00001)

        -- Calculate required Strength to rebirth
        local currentRebirths = GetRebirths()
        local requiredStrength = (currentRebirths * 5000) + 5000
        local currentStrength = GetStrength()

        -- If strength is enough, perform rebirth sequence
        if currentStrength >= requiredStrength then
            -- Unequip Swift Samurai
            UnequipPets("Swift Samurai")
            task.wait(0.1) -- Short delay to ensure proper unequip

            -- Equip Tribal Overlord
            EquipPets("Tribal Overlord")
            task.wait(0.1) -- Short delay before rebirth

            -- Perform rebirth event
            for i = 1, 8 do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end

            -- Unequip Tribal Overlord
            UnequipPets("Tribal Overlord")
            task.wait(0.1)

            -- Re-equip Swift Samurai to continue farming
            EquipPets("Swift Samurai")
        end
    end
end


local OP_Auto_Farm_Enabled = false

local switch = OPtab:AddSwitch("OP Auto Farm (Packs Needed)", function(bool)
    OP_Auto_Farm_Enabled = bool

    if bool then
        -- Equip 8 pets with the name "Swift Samurai"
        local player = game:GetService("Players").LocalPlayer
        local petFolder = player:FindFirstChild("petsFolder") and player.petsFolder:FindFirstChild("Unique")

        if petFolder then
            local equippedCount = 0
            for _, pet in pairs(petFolder:GetChildren()) do
                if pet.Name == "Swift Samurai" and equippedCount < 8 then
                    game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", pet)
                    equippedCount = equippedCount + 1
                end
            end
        end

        -- Teleport to the target position
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-8652.867, 29.2667, 2089.261)
        end

        -- Machine interaction loop
        task.spawn(function()
            while OP_Auto_Farm_Enabled do
                local args = {
                    [1] = "useMachine",
                    [2] = workspace:WaitForChild("machinesFolder"):WaitForChild("Jungle Bar Lift"):WaitForChild("interactSeat")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("machineInteractRemote"):InvokeServer(unpack(args))
                task.wait(0.5) -- Prevents overloading the server
            end
        end)

        -- Muscle event loop
        task.spawn(function()
            while OP_Auto_Farm_Enabled do
                local args = { [1] = "rep" }
                game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer(unpack(args))
                task.wait(0.0001)
            end
        end)
    end
end)

local HideFrame = false -- Toggle state

-- Toggle creation
local switch = OPtab:AddSwitch("Hide Frame", function(state)
    HideFrame = state
    local replicatedStorage = game:GetService("ReplicatedStorage")

    -- Find frames
    local strengthFrame = replicatedStorage:FindFirstChild("strengthFrame")
    local durabilityFrame = replicatedStorage:FindFirstChild("durabilityFrame")
    local agilityFrame = replicatedStorage:FindFirstChild("agilityFrame")

    -- Toggle visibility
    if strengthFrame then
        strengthFrame.Visible = not state
    end
    if durabilityFrame then
        durabilityFrame.Visible = not state
    end
    if agilityFrame then
        agilityFrame.Visible = not state
    end
end)

local AutoEatProteinEgg = false  -- Toggle state
local proteinEggTool = "Protein Egg"  -- Tool name

-- Toggle creation
local switch = OPtab:AddSwitch("Auto Eat Protein Egg Every 30 Minutes", function(state)
    AutoEatProteinEgg = state
    if state then
        task.spawn(AutoEatProteinEggLoop)
    end
end)

-- Function to equip "Protein Egg" tool and do the strength rep event
local function EquipProteinEggAndRep()
    local player = game.Players.LocalPlayer
    local backpack = player.Backpack

    -- Equip Protein Egg tool
    local proteinEgg = backpack:FindFirstChild(proteinEggTool)
    if proteinEgg then
        -- Fire the strength rep event
        local args = { [1] = "rep" }
        player:WaitForChild("muscleEvent"):FireServer(unpack(args))
    end
end

-- Function to repeatedly equip "Protein Egg" and do strength rep every 30 minutes
function AutoEatProteinEggLoop()
    while AutoEatProteinEgg do
        -- Equip and fire strength rep event
        EquipProteinEggAndRep()

        -- Wait for 30 minutes (1800 seconds) before doing it again
        task.wait(1800)  -- 30 minutes
    end
end

local player = game:GetService("Players").LocalPlayer
local leaderstats = player:FindFirstChild("leaderstats")

-- Creating labels
OPtab:AddLabel("Stats Gained In Server")
local StrengthLabel = OPtab:AddLabel("Strength: 0")
local DurabilityLabel = OPtab:AddLabel("Durability: 0")
local AgilityLabel = OPtab:AddLabel("Agility: 0")
local KillLabel = OPtab:AddLabel("Kill: 0")
local GoodKarmaLabel = OPtab:AddLabel("Good Karma: 0")
local BadKarmaLabel = OPtab:AddLabel("Bad Karma: 0")

-- Storing initial values
local initialStrength = leaderstats and leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or 0
local initialDurability = player:FindFirstChild("Durability") and player.Durability.Value or 0
local initialAgility = player:FindFirstChild("Agility") and player.Agility.Value or 0
local initialKills = leaderstats and leaderstats:FindFirstChild("Kills") and leaderstats.Kills.Value or 0
local initialGoodKarma = player:FindFirstChild("goodKarma") and player.goodKarma.Value or 0
local initialEvilKarma = player:FindFirstChild("evilKarma") and player.evilKarma.Value or 0

-- Function to update labels dynamically
task.spawn(function()
    while true do
        if leaderstats then
            -- Get current values
            local currentStrength = leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or initialStrength
            local currentDurability = player:FindFirstChild("Durability") and player.Durability.Value or initialDurability
            local currentAgility = player:FindFirstChild("Agility") and player.Agility.Value or initialAgility
            local currentKills = leaderstats:FindFirstChild("Kills") and leaderstats.Kills.Value or initialKills
            local currentGoodKarma = player:FindFirstChild("goodKarma") and player.goodKarma.Value or initialGoodKarma
            local currentEvilKarma = player:FindFirstChild("evilKarma") and player.evilKarma.Value or initialEvilKarma

            -- Update the labels
            StrengthLabel.Text = "Strength: " .. (currentStrength - initialStrength)
            DurabilityLabel.Text = "Durability: " .. (currentDurability - initialDurability)
            AgilityLabel.Text = "Agility: " .. (currentAgility - initialAgility)
            KillLabel.Text = "Kill: " .. (currentKills - initialKills)
            GoodKarmaLabel.Text = "Good Karma: " .. (currentGoodKarma - initialGoodKarma)
            BadKarmaLabel.Text = "Bad Karma: " .. (currentEvilKarma - initialEvilKarma)
        end

        task.wait(0.1) -- Updates every 0.1 seconds
    end
end)
