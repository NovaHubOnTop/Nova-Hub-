local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()

local window = library:AddWindow("Test", {
    main_color = Color3.fromRGB(41, 74, 122),
    min_size = Vector2.new(650, 600),
    can_resize = false,
})

local Killing = window:AddTab("Killing")

-- Labels and textboxes for whitelisting
Killing:AddLabel("Whitelisting")

_G.whitelist = {}

local whitelistBox = Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

local unwhitelistBox = Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")

-- Auto Kill Toggle
_G.autoKill = false

local autoKillToggle = Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state

    if state then
        task.spawn(function()
            while _G.autoKill do
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

                if not punchTool then
                    local storedPunch = game.ReplicatedStorage:FindFirstChild("Punch")
                    if storedPunch then
                        punchTool = storedPunch:Clone()
                        punchTool.Parent = player.Backpack
                    end
                end

                if punchTool and punchTool.Parent ~= character then
                    punchTool.Parent = character
                end

                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player and not _G.whitelist[targetPlayer.Name] then
                        local targetCharacter = targetPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            local touchPart = targetCharacter.HumanoidRootPart
                            firetouchinterest(character.RightHand, touchPart, 1)
                            firetouchinterest(character.LeftHand, touchPart, 1)
                            wait(0.1)
                            firetouchinterest(character.RightHand, touchPart, 0)
                            firetouchinterest(character.LeftHand, touchPart, 0)
                        end
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

Killing:AddLabel("Targeting")

-- Dropdown for selecting a target
local selectedTargetName = nil
local dropdown = Killing:AddDropdown("Select Target", function(playerName)
    selectedTargetName = playerName
end)

local function updateDropdown()
    dropdown:Clear()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name ~= game.Players.LocalPlayer.Name then
            dropdown:Add(player.Name)
        end
    end
end

game.Players.PlayerAdded:Connect(updateDropdown)
game.Players.PlayerRemoving:Connect(updateDropdown)
updateDropdown()

-- Kill Target Toggle
_G.autoPunchanim = false
_G.killTimer = 0

local killTargetToggle = Killing:AddSwitch("Kill Target", function(state)
    _G.autoPunchanim = state
    _G.killTimer = 0

    if state and selectedTargetName then
        task.spawn(function()
            while _G.autoPunchanim do
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local targetPlayer = game.Players:FindFirstChild(selectedTargetName)

                if targetPlayer and targetPlayer.Character then
                    local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

                    if not punchTool then
                        local storedPunch = game.ReplicatedStorage:FindFirstChild("Punch")
                        if storedPunch then
                            punchTool = storedPunch:Clone()
                            punchTool.Parent = player.Backpack
                        end
                    end

                    if punchTool and punchTool.Parent ~= character then
                        punchTool.Parent = character
                    end

                    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                    _G.autoFireTouch = true
                    task.spawn(function()
                        while _G.autoPunchanim and _G.autoFireTouch do
                            if targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                local targetHRP = targetPlayer.Character.HumanoidRootPart
                                local rightHand = character:FindFirstChild("RightHand")
                                local leftHand = character:FindFirstChild("LeftHand")

                                if rightHand and leftHand then
                                    firetouchinterest(rightHand, targetHRP, 1)
                                    firetouchinterest(leftHand, targetHRP, 1)
                                    wait(0.1)
                                    firetouchinterest(rightHand, targetHRP, 0)
                                    firetouchinterest(leftHand, targetHRP, 0)
                                end
                            end
                            wait(0.1)
                        end
                    end)
                end

                -- Timer Update
                _G.killTimer = 0
                while _G.autoPunchanim do
                    _G.killTimer = _G.killTimer + 1
                    local minutes = math.floor(_G.killTimer / 60)
                    local seconds = _G.killTimer % 60
                    timerLabel:SetText(string.format("Amount of time killing Target : %02d:%02d", minutes, seconds))
                    wait(1)
                end
            end
        end)
    else
        _G.autoPunchanim = false
        _G.autoFireTouch = false
        timerLabel:SetText("Amount of time killing Target : 00:00")
    end
end)

-- Create the timer label immediately after the Kill Target toggle
local timerLabel = Killing:AddLabel("Amount of time killing Target : 00:00")
