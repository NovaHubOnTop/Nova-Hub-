local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

local window = library:AddWindow("BLX Clan Script | Made By Encrypted", {
    main_color = Color3.fromRGB(194, 218, 184),
    min_size = Vector2.new(600, 500),
    can_resize = false,
})

local OPtab = window:AddTab("OP Things")

-- Auto Rebirth Until Target Amount
local AutoRebirthUntilTarget = false
local RebirthTarget = 0

OPtab:AddTextBox("Choose Rebirth Target", function(text)
    local target = tonumber(text)
    if target then
        RebirthTarget = target
    end
end)

OPtab:AddSwitch("Auto Rebirth Until Target Amount", function(state)
    AutoRebirthUntilTarget = state
    if state then
        task.spawn(AutoRebirthUntilTargetLoop)
    end
end)

local function AutoRebirthUntilTargetLoop()
    local player = game.Players.LocalPlayer
    local leaderstats = player:WaitForChild("leaderstats")
    
    while AutoRebirthUntilTarget do
        if leaderstats.Rebirths.Value < RebirthTarget then
            game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        else
            AutoRebirthUntilTarget = false
        end
        task.wait(0.1)
    end
end

-- Normal Auto Rebirth
local OP_Auto_Rebirth_Enabled = false

OPtab:AddSwitch("Auto Rebirth (Normal Auto Rebirth)", function(enabled)
    OP_Auto_Rebirth_Enabled = enabled

    if enabled then
        local player = game.Players.LocalPlayer
        task.spawn(function()
            while OP_Auto_Rebirth_Enabled do
                game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer("useMachine", workspace.machinesFolder["Jungle Bar Lift"].interactSeat)
                game.Players.LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end
end)

-- OP Auto Rebirth
local OPAutoRebirth = false

OPtab:AddSwitch("OP Auto Rebirth (Packs Needed)", function(state)
    OPAutoRebirth = state
    if state then
        task.spawn(OPAutoRebirthLoop)
    end
end)

local function EquipMultiplePets(petName)
    local player = game.Players.LocalPlayer
    local petsFolder = player.petsFolder.Unique

    if petsFolder then
        local count = 0
        for _, pet in pairs(petsFolder:GetChildren()) do
            if pet.Name == petName and count < 8 then
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", pet)
                count = count + 1
            end
        end
    end
end

function OPAutoRebirthLoop()
    while OPAutoRebirth do
        EquipMultiplePets("Swift Samurai")

        game.Players.LocalPlayer.muscleEvent:FireServer("rep")

        local leaderstats = game.Players.LocalPlayer:FindFirstChild("leaderstats")
        local requiredStrength = 5000 * (leaderstats.Rebirths.Value + 1)

        while game.Players.LocalPlayer.Strength.Value < requiredStrength do
            task.wait(0.1)
        end

        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipAllPets")
        EquipMultiplePets("Tribal Overlord")
        game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipAllPets")
        EquipMultiplePets("Swift Samurai")

        task.wait(0.1)
    end
end

-- OP Auto Farm
local OP_Auto_Farm_Enabled = false

OPtab:AddSwitch("OP Auto Farm (Packs Needed)", function(enabled)
    OP_Auto_Farm_Enabled = enabled

    if enabled then
        task.spawn(function()
            while OP_Auto_Farm_Enabled do
                game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer("useMachine", workspace.machinesFolder["Jungle Bar Lift"].interactSeat)
                game.Players.LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end
end)

-- Hide UI Frame
local HideFrame = false

OPtab:AddSwitch("Hide Frame", function(state)
    HideFrame = state
    for _, frame in pairs({"strengthFrame", "durabilityFrame", "agilityFrame"}) do
        local uiFrame = game:GetService("ReplicatedStorage"):FindFirstChild(frame)
        if uiFrame then
            uiFrame.Visible = not state
        end
    end
end)

-- Auto Eat Protein Egg
local AutoEatProteinEgg = false

OPtab:AddSwitch("Auto Eat Protein Egg Every 30 Minutes", function(state)
    AutoEatProteinEgg = state
    if state then
        task.spawn(AutoEatProteinEggLoop)
    end
end)

local function AutoEatProteinEggLoop()
    while AutoEatProteinEgg do
        game.Players.LocalPlayer.muscleEvent:FireServer("rep")
        task.wait(1800)
    end
end

-- Stats Gained Display
local function AbbreviateNumber(number)
    if number >= 1e15 then return string.format("%.1f Qa", number / 1e15)
    elseif number >= 1e12 then return string.format("%.1f T", number / 1e12)
    elseif number >= 1e9 then return string.format("%.1f B", number / 1e9)
    elseif number >= 1e6 then return string.format("%.1f M", number / 1e6)
    elseif number >= 1e3 then return string.format("%.1f K", number / 1e3)
    else return tostring(number)
    end
end

OPtab:AddLabel("Stats Gained In Server:")
local strengthLabel = OPtab:AddLabel("Strength: 0")
local durabilityLabel = OPtab:AddLabel("Durability: 0")
local agilityLabel = OPtab:AddLabel("Agility: 0")
local killLabel = OPtab:AddLabel("Kill: 0")
local goodKarmaLabel = OPtab:AddLabel("Good Karma: 0")
local badKarmaLabel = OPtab:AddLabel("Bad Karma: 0")

local player = game.Players.LocalPlayer
local leaderstats = player:WaitForChild("leaderstats")

local initialStats = {
    Strength = leaderstats.Strength.Value,
    Durability = leaderstats.Durability.Value,
    Agility = leaderstats.Agility.Value,
    Kills = leaderstats.Kills.Value,
    GoodKarma = player.goodKarma.Value,
    BadKarma = player.evilKarma.Value
}

local function updateStats()
    strengthLabel.Text = "Strength: " .. AbbreviateNumber(leaderstats.Strength.Value - initialStats.Strength)
    durabilityLabel.Text = "Durability: " .. AbbreviateNumber(leaderstats.Durability.Value - initialStats.Durability)
    agilityLabel.Text = "Agility: " .. AbbreviateNumber(leaderstats.Agility.Value - initialStats.Agility)
    killLabel.Text = "Kill: " .. AbbreviateNumber(leaderstats.Kills.Value - initialStats.Kills)
    goodKarmaLabel.Text = "Good Karma: " .. AbbreviateNumber(player.goodKarma.Value - initialStats.GoodKarma)
    badKarmaLabel.Text = "Bad Karma: " .. AbbreviateNumber(player.evilKarma.Value - initialStats.BadKarma)
end

leaderstats.Strength.Changed:Connect(updateStats)
leaderstats.Durability.Changed:Connect(updateStats)
leaderstats.Agility.Changed:Connect(updateStats)
leaderstats.Kills.Changed:Connect(updateStats)
player.goodKarma.Changed:Connect(updateStats)
player.evilKarma.Changed:Connect(updateStats)
updateStats()
