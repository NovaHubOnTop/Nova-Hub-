local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, stateVariable)
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Unequip the tool if the toggle is off
    if not stateVariable then
        local tool = player.Character:FindFirstChild(toolName)
        if tool then
            tool.Parent = backpack  -- Move tool back to backpack if equipped
        end
    end
    
    -- Equip the tool if the toggle is on
    while stateVariable do
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
        task.wait(0.1)
    end
end

-- **Auto Equip Toggles**
local autoWeight = false
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    autoWeight = state
    autoEquipTool("Weight", autoWeight)
end)

local autoPushups = false
Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    autoPushups = state
    autoEquipTool("Pushups", autoPushups)
end)

local autoSitups = false
Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    autoSitups = state
    autoEquipTool("Sit-ups", autoSitups)
end)

local autoHandstands = false
Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    autoHandstands = state
    autoEquipTool("Handstand", autoHandstands)
end)

local autoRebirth = false
local rebirthUntilTarget = false
local targetRebirths = 0

-- Auto Rebirth Toggle
Tabs.Rebirth:AddToggle("Auto Rebirth", { Title = "Auto Rebirth", Default = false }):OnChanged(function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

-- Input Field for Target Rebirth Amount
local Input = Tabs.Rebirth:AddInput("Select Rebirth Target", {
    Title = "Select Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        targetRebirths = tonumber(Value) or 0
        print("Target rebirths set to:", targetRebirths)
    end
})

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle("Rebirth Until Target Amount", { Title = "Rebirth Until Target Amount", Default = false }):OnChanged(function(state)
    rebirthUntilTarget = state
    while rebirthUntilTarget do
        -- Get the player's leaderstats
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local currentRebirths = leaderstats:FindFirstChild("Rebirths")
            if currentRebirths then
                -- Stop when reaching the target rebirths
                if currentRebirths.Value >= targetRebirths then
                    rebirthUntilTarget = false
                    print("Target rebirth amount reached!")
                    break
                end

                -- Perform the rebirth
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end
        task.wait(0.1)
    end
end)

-- Timer for Stats
local timeElapsed = 0  -- Start from 0 seconds

local label = Tabs.Stats:AddParagraph({
    Title = "Time elapsed since script executed",
    Content = "0d 0h 0m 0s"
})

-- Function to format time
local function formatTime(seconds)
    local days = math.floor(seconds / (24 * 3600))
    local hours = math.floor((seconds % (24 * 3600)) / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local remainingSeconds = seconds % 60
    return string.format("%dd %dh %dm %ds", days, hours, minutes, remainingSeconds)
end

-- Update the label every second
while true do
    label:SetContent(formatTime(timeElapsed))
    timeElapsed = timeElapsed + 1
    task.wait(1)  -- Wait for 1 second before updating
end

-- Player Stats Logic
local trackStatsLabel = Tabs.Stats:AddParagraph({
    Title = "Track Player Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nGood Karma: 0\nBad Karma: 0"
})

-- Add the dropdown for selecting players
local Dropdown = Tabs.Stats:AddDropdown("Select Player", {
    Title = "Select Player",
    Values = {},
    Multi = false,
    Default = 1,
})

-- Function to format the stats
local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- Create the "Track Player Stats" paragraph
trackStatsLabel = Tabs.Stats:AddParagraph({
    Title = "Track Player Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nGood Karma: 0\nBad Karma: 0"
})

-- Function to update the "Track Player Stats" content when a player is selected
local function updatePlayerStats(player)
    local leaderstats = player:FindFirstChild("leaderstats")
    local statsText = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nGood Karma: 0\nBad Karma: 0"

    -- If the player has leaderstats, update the stats
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        local durability = player:FindFirstChild("Durability")
        local agility = player:FindFirstChild("Agility")
        local kills = leaderstats:FindFirstChild("Kills")
        local goodKarma = player:FindFirstChild("goodKarma")
        local evilKarma = player:FindFirstChild("evilKarma")

        statsText = string.format(
            "Amount Of Strength: %s\nAmount Of Durability: %s\nAmount Of Agility: %s\nAmount Of Kill: %s\nGood Karma: %s\nBad Karma: %s",
            abbreviateNumber(strength and strength.Value or 0),
            abbreviateNumber(durability and durability.Value or 0),
            abbreviateNumber(agility and agility.Value or 0),
            abbreviateNumber(kills and kills.Value or 0),
            abbreviateNumber(goodKarma and goodKarma.Value or 0),
            abbreviateNumber(evilKarma and evilKarma.Value or 0)
        )
    end

    -- Update the paragraph with the new stats text
    trackStatsLabel:SetContent(statsText)
end

-- Add players to the dropdown when they are added to the game
game.Players.PlayerAdded:Connect(function(player)
    table.insert(Dropdown.Values, player.Name)
    Dropdown:SetValues(Dropdown.Values)
end)

-- When the dropdown value changes (player selection), update the stats
Dropdown:OnChanged(function(selectedPlayerName)
    local player = game.Players:FindFirstChild(selectedPlayerName)
    if player then
        updatePlayerStats(player)
    end
end)

-- Optionally, you could track player stats in real-time with event listeners for changes
local function trackRealTimeStats(player)
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        local durability = player:FindFirstChild("Durability")
        local agility = player:FindFirstChild("Agility")
        local kills = leaderstats:FindFirstChild("Kills")
        local goodKarma = player:FindFirstChild("goodKarma")
        local evilKarma = player:FindFirstChild("evilKarma")

        -- Connect value changes to update stats in real-time
        if strength then
            strength.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
        if durability then
            durability.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
        if agility then
            agility.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
        if kills then
            kills.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
        if goodKarma then
            goodKarma.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
        if evilKarma then
            evilKarma.Changed:Connect(function()
                updatePlayerStats(player)
            end)
        end
    end
end

-- Start tracking stats when the player is selected from the dropdown
Dropdown:OnChanged(function(selectedPlayerName)
    local player = game.Players:FindFirstChild(selectedPlayerName)
    if player then
        trackRealTimeStats(player)
    end
end)

local totalStatsLabel = nil

-- Add the paragraph to track the total stats gained in the server
totalStatsLabel = Tabs.Stats:AddParagraph({
    Title = "Amount Of Stats Gained In Server",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kill: 0\nAmount Of Bad Karma: 0\nAmount Of Good Karma: 0"
})

-- Function to calculate and update the total stats in the server
local function updateTotalStats()
    local totalStrength = 0
    local totalDurability = 0
    local totalAgility = 0
    local totalKills = 0
    local totalGoodKarma = 0
    local totalBadKarma = 0

    -- Iterate over all players in the game and sum their stats
    for _, player in ipairs(game.Players:GetPlayers()) do
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local strength = leaderstats:FindFirstChild("Strength")
            local durability = player:FindFirstChild("Durability")
            local agility = player:FindFirstChild("Agility")
            local kills = leaderstats:FindFirstChild("Kills")
            local goodKarma = player:FindFirstChild("goodKarma")
            local badKarma = player:FindFirstChild("evilKarma")

            -- Add up each player's stats
            if strength then
                totalStrength = totalStrength + strength.Value
            end
            if durability then
                totalDurability = totalDurability + durability.Value
            end
            if agility then
                totalAgility = totalAgility + agility.Value
            end
            if kills then
                totalKills = totalKills + kills.Value
            end
            if goodKarma then
                totalGoodKarma = totalGoodKarma + goodKarma.Value
            end
            if badKarma then
                totalBadKarma = totalBadKarma + badKarma.Value
            end
        end
    end

    -- Update the "Amount Of Stats Gained In Server" paragraph with the new totals
    totalStatsLabel:SetContent(string.format(
        "Amount Of Strength: %s\nAmount Of Durability: %s\nAmount Of Agility: %s\nAmount Of Kill: %s\nAmount Of Bad Karma: %s\nAmount Of Good Karma: %s",
        abbreviateNumber(totalStrength),
        abbreviateNumber(totalDurability),
        abbreviateNumber(totalAgility),
        abbreviateNumber(totalKills),
        abbreviateNumber(totalBadKarma),
        abbreviateNumber(totalGoodKarma)
    ))
end

-- Continuously update the total stats
while true do
    updateTotalStats()
    task.wait(1)
end
