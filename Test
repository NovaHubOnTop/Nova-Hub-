local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend 111Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, stateVariable)
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Unequip the tool if the toggle is off
    if not stateVariable then
        local tool = player.Character:FindFirstChild(toolName)
        if tool then
            tool.Parent = backpack  -- Move tool back to backpack if equipped
        end
    end
    
    -- Equip the tool if the toggle is on
    while stateVariable do
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
        task.wait(0.1)
    end
end

-- **Auto Equip Toggles**
local autoWeight = false
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    autoWeight = state
    autoEquipTool("Weight", autoWeight)
end)

local autoPushups = false
Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    autoPushups = state
    autoEquipTool("Pushups", autoPushups)
end)

local autoSitups = false
Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    autoSitups = state
    autoEquipTool("Sit-ups", autoSitups)
end)

local autoHandstands = false
Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    autoHandstands = state
    autoEquipTool("Handstand", autoHandstands)
end)

local autoRebirth = false
local rebirthUntilTarget = false
local targetRebirths = 0

-- Auto Rebirth Toggle
Tabs.Rebirth:AddToggle("Auto Rebirth", { Title = "Auto Rebirth", Default = false }):OnChanged(function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

-- Input Field for Target Rebirth Amount
local Input = Tabs.Rebirth:AddInput("Select Rebirth Target", {
    Title = "Select Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        targetRebirths = tonumber(Value) or 0
        print("Target rebirths set to:", targetRebirths)
    end
})

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle("Rebirth Until Target Amount", { Title = "Rebirth Until Target Amount", Default = false }):OnChanged(function(state)
    rebirthUntilTarget = state
    while rebirthUntilTarget do
        -- Get the player's leaderstats
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local currentRebirths = leaderstats:FindFirstChild("Rebirths")
            if currentRebirths then
                -- Stop when reaching the target rebirths
                if currentRebirths.Value >= targetRebirths then
                    rebirthUntilTarget = false
                    print("Target rebirth amount reached!")
                    break
                end

                -- Perform the rebirth
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end
        task.wait(0.1)
    end
end)

-- Create "Select Target" dropdown
local Dropdown = Tabs.Stats:AddDropdown("Select Target", {
    Title = "Select Target",
    Values = {},
    Multi = false,
    Default = 1,
})

-- Populate the dropdown with player names
local function updateDropdown()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    Dropdown:SetValues(playerNames)
end

-- Call updateDropdown whenever players join/leave
game.Players.PlayerAdded:Connect(updateDropdown)
game.Players.PlayerRemoved:Connect(updateDropdown)

-- Set the default selection to the first player
Dropdown:SetValue(game.Players:GetPlayers()[1] and game.Players:GetPlayers()[1].Name or "")

-- Handle dropdown changes
Dropdown:OnChanged(function(selectedPlayerName)
    -- Update the target stats paragraph with selected player's data
    local selectedPlayer = game.Players:FindFirstChild(selectedPlayerName)
    if selectedPlayer then
        local leaderstats = selectedPlayer:FindFirstChild("leaderstats")
        local strength = leaderstats and leaderstats.Strength and leaderstats.Strength.Value or 0
        local durability = selectedPlayer.Durability and selectedPlayer.Durability.Value or 0
        local agility = selectedPlayer.Agility and selectedPlayer.Agility.Value or 0
        local kills = leaderstats and leaderstats.Kills and leaderstats.Kills.Value or 0

        -- Update the paragraph content
        TargetStatsParagraph:SetContent(string.format([[
            Amount Of Strength: %s
            Amount Of Durability: %s
            Amount Of Agility: %s
            Amount Of Kills: %s
        ]], abbreviateNumber(strength), abbreviateNumber(durability), abbreviateNumber(agility), abbreviateNumber(kills)))
    end
end)

-- Create the paragraph for target stats
local TargetStatsParagraph = Tabs.Stats:AddParagraph({
    Title = "Target Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0",
})
