-- Whitelist for specific usernames
local whitelistedUsers = {
    "Mrbignewcoming3",
    "Hi_dorihi"
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
    for _, whitelisted in ipairs(whitelistedUsers) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Kick the player if they are not whitelisted
if not isWhitelisted(username) then
    player:Kick("Not WhiteListed L")
    return
end

-- Load UI library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/muscle-legend-lite-hub-elerium-library-/refs/heads/main/library", true))()

local window = library:AddWindow("Nova Hub V1 Free Version | Encrypted Script", {
    main_color = Color3.fromRGB(75,0,130),
    min_size = Vector2.new(700, 640),
    can_resize = false,
})

-- Killing Tab
local Killing = window:AddTab("Killing")

Killing:AddLabel("Whitelisting")
_G.whitelist = {}

Killing:AddTextBox("Whitelist", function(name)
    if name and name ~= "" then
        _G.whitelist[name] = true
    end
end)

Killing:AddTextBox("Unwhitelist", function(name)
    if name and _G.whitelist[name] then
        _G.whitelist[name] = nil
    end
end)

Killing:AddLabel("Killing Features")
_G.autoKill = false

local function punch(target)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local punchTool = player.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

    if punchTool and punchTool.Parent ~= character then
        punchTool.Parent = character
    end

    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        firetouchinterest(character.RightHand, target.Character.HumanoidRootPart, 1)
        firetouchinterest(character.LeftHand, target.Character.HumanoidRootPart, 1)
        wait(0.1)
        firetouchinterest(character.RightHand, target.Character.HumanoidRootPart, 0)
        firetouchinterest(character.LeftHand, target.Character.HumanoidRootPart, 0)
    end
end

Killing:AddSwitch("Auto Kill", function(state)
    _G.autoKill = state
    if state then
        task.spawn(function()
            while _G.autoKill do
                for _, target in pairs(game.Players:GetPlayers()) do
                    if target ~= player and not _G.whitelist[target.Name] then
                        punch(target)
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

Killing:AddLabel("Targeting")
local selectedTargetName = nil
local dropdown = Killing:AddDropdown("Select Target", function(playerName)
    selectedTargetName = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        dropdown:Add(p.Name)
    end
end

_G.killTargetActive = false
Killing:AddSwitch("Kill Target", function(state)
    _G.killTargetActive = state
    if state and selectedTargetName then
        task.spawn(function()
            while _G.killTargetActive do
                local target = game.Players:FindFirstChild(selectedTargetName)
                if target then
                    punch(target)
                end
                wait(0.1)
            end
        end)
    end
end)

Killing:AddLabel("Auto Punching")
_G.AutoPunch = false
Killing:AddSwitch("Auto Punch", function(bool)
    _G.AutoPunch = bool
    if bool then
        task.spawn(function()
            while _G.AutoPunch do
                punch()
                wait(0.1)
            end
        end)
    end
end)

_G.AutoEquipPunch = false
Killing:AddSwitch("Auto Equip Punch", function(bool)
    _G.AutoEquipPunch = bool
    if bool then
        task.spawn(function()
            while _G.AutoEquipPunch do
                local punchTool = player.Backpack:FindFirstChild("Punch")
                if punchTool then
                    punchTool.Parent = player.Character
                end
                wait(0.2)
            end
        end)
    end
end)

-- Player Tab
local PlayerTab = window:AddTab("Player")

PlayerTab:AddLabel("Spying")
local selectedSpyTarget = nil
local spyDropdown = PlayerTab:AddDropdown("Select Player", function(playerName)
    selectedSpyTarget = playerName
end)

for _, p in ipairs(game.Players:GetPlayers()) do
    if p.Name ~= player.Name then
        spyDropdown:Add(p.Name)
    end
end

_G.spyActive = false
local function updateCamera(targetPlayer)
    local camera = game.Workspace.CurrentCamera
    while _G.spyActive and targetPlayer do
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local humanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            camera.CameraSubject = humanoidRootPart
        end
        targetPlayer.CharacterAdded:Wait()
    end
    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
end

PlayerTab:AddSwitch("Spy Player", function(state)
    _G.spyActive = state
    if state and selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer then
            task.spawn(updateCamera, targetPlayer)
        end
    else
        game.Workspace.CurrentCamera.CameraSubject = player.Character:FindFirstChild("Humanoid")
    end
end)

PlayerTab:AddButton("Teleport to player", function()
    if selectedSpyTarget then
        local targetPlayer = game.Players:FindFirstChild(selectedSpyTarget)
        if targetPlayer and targetPlayer.Character then
            local targetHumanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetHumanoidRootPart then
                player.Character:SetPrimaryPartCFrame(targetHumanoidRootPart.CFrame)
            end
        end
    else
        warn("No player selected!")
    end
end)
