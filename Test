local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

local window = library:AddWindow("BLX Clan Script | Made By Encrypted", {
    main_color = Color3.fromRGB(194, 218, 184),
    min_size = Vector2.new(600, 500),
    can_resize = false,
})

local OPtab = window:AddTab("OP Things")

-- Auto Rebirth Until Target Amount
local AutoRebirthUntilTarget = false
local RebirthTarget = 0

OPtab:AddTextBox("Choose Rebirth Target", function(text)
    local target = tonumber(text)
    if target then
        RebirthTarget = target
    end
end)

OPtab:AddSwitch("Auto Rebirth Until Target Amount", function(state)
    AutoRebirthUntilTarget = state
    if state then
        task.spawn(AutoRebirthUntilTargetLoop)
    end
end)

local function AutoRebirthUntilTargetLoop()
    local player = game.Players.LocalPlayer
    local leaderstats = player:WaitForChild("leaderstats")
    
    while AutoRebirthUntilTarget do
        if leaderstats.Rebirths.Value < RebirthTarget then
            game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        else
            AutoRebirthUntilTarget = false
        end
        task.wait(0.1)
    end
end

-- OP Auto Rebirth
local OPAutoRebirth = false

OPtab:AddSwitch("OP Auto Rebirth (Packs Needed)", function(state)
    OPAutoRebirth = state
    if state then
        task.spawn(OPAutoRebirthLoop)
    end
end)

local function EquipMultiplePets(petName)
    local player = game.Players.LocalPlayer
    local petsFolder = player.petsFolder.Unique

    if petsFolder then
        local count = 0
        for _, pet in pairs(petsFolder:GetChildren()) do
            if pet.Name == petName and count < 8 then
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", pet)
                count = count + 1
            end
        end
    end
end

function OPAutoRebirthLoop()
    while OPAutoRebirth do
        EquipMultiplePets("Swift Samurai")

        -- Do reps
        for i = 1, 50 do
            game.Players.LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end

        -- Check strength before rebirth
        local leaderstats = game.Players.LocalPlayer:FindFirstChild("leaderstats")
        local requiredStrength = 5000 * (leaderstats.Rebirths.Value + 1)

        while game.Players.LocalPlayer.Strength.Value < requiredStrength do
            task.wait(0.1)
        end

        -- Unequip all pets and equip Tribal Overlord pets before rebirth
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipAllPets")
        EquipMultiplePets("Tribal Overlord")

        -- Rebirth
        game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        
        -- Re-equip Swift Samurai pets after rebirth
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipAllPets")
        EquipMultiplePets("Swift Samurai")

        task.wait(0.1)
    end
end

-- Hide UI Frame
local HideFrame = false

OPtab:AddSwitch("Hide Frame", function(state)
    HideFrame = state
    for _, frame in pairs({"strengthFrame", "durabilityFrame", "agilityFrame"}) do
        local uiFrame = game:GetService("ReplicatedStorage"):FindFirstChild(frame)
        if uiFrame then
            uiFrame.Visible = not state
        end
    end
end)

-- Auto Eat Protein Egg
local AutoEatProteinEgg = false

OPtab:AddSwitch("Auto Eat Protein Egg Every 30 Minutes", function(state)
    AutoEatProteinEgg = state
    if state then
        task.spawn(AutoEatProteinEggLoop)
    end
end)

local function AutoEatProteinEggLoop()
    while AutoEatProteinEgg do
        game.Players.LocalPlayer.muscleEvent:FireServer("rep")
        task.wait(1800)
    end
end

-- Helper function to abbreviate large numbers
local function abbreviateNumber(value)
    if value >= 1e15 then
        return string.format("%.1fQa", value / 1e15)
    elseif value >= 1e12 then
        return string.format("%.1fT", value / 1e12)
    elseif value >= 1e9 then
        return string.format("%.1fB", value / 1e9)
    elseif value >= 1e6 then
        return string.format("%.1fM", value / 1e6)
    elseif value >= 1e3 then
        return string.format("%.1fK", value / 1e3)
    else
        return tostring(value)
    end
end

-- Function to create labels for the local player's stats
local function createMyLabels()
    local player = game.Players.LocalPlayer
    if not player then return end

    local leaderstats = player:FindFirstChild("leaderstats")
    if not leaderstats then return end

    -- Create labels for the stats we want to track
    local labels = {
        StrengthGainedLabel = OPtab:AddLabel("Amount of strength gained in this server: 0"),
        DurabilityGainedLabel = OPtab:AddLabel("Amount of durability gained in this server: 0"),
        AgilityGainedLabel = OPtab:AddLabel("Amount of agility gained in this server: 0"),
        KillsGainedLabel = OPtab:AddLabel("Amount of kills gained in this server: 0"),
        GoodKarmaGainedLabel = OPtab:AddLabel("Amount of Good Karma gained in this server: 0"),
        BadKarmaGainedLabel = OPtab:AddLabel("Amount of Bad Karma gained in this server: 0"),
    }

    -- Assume playerData is already defined in your main script
    playerData[player.Name] = labels

    -- Capture the initial values when you join the server
    local initialStrength = leaderstats.Strength and leaderstats.Strength.Value or 0
    local initialDurability = player:FindFirstChild("Durability") and player.Durability.Value or 0
    local initialAgility = player:FindFirstChild("Agility") and player.Agility.Value or 0
    local initialKills = leaderstats.Kills and leaderstats.Kills.Value or 0
    local initialGoodKarma = player:FindFirstChild("goodKarma") and player.goodKarma.Value or 0
    local initialBadKarma = player:FindFirstChild("badKarma") and player.badKarma.Value or 0

    -- Function to update labels based on stat changes
    local function updateLabels()
        local strengthGained = leaderstats.Strength and leaderstats.Strength.Value - initialStrength or 0
        local durabilityGained = player:FindFirstChild("Durability") and player.Durability.Value - initialDurability or 0
        local agilityGained = player:FindFirstChild("Agility") and player.Agility.Value - initialAgility or 0
        local killsGained = leaderstats.Kills and leaderstats.Kills.Value - initialKills or 0
        local goodKarmaGained = player:FindFirstChild("goodKarma") and player.goodKarma.Value - initialGoodKarma or 0
        local badKarmaGained = player:FindFirstChild("badKarma") and player.badKarma.Value - initialBadKarma or 0

        labels.StrengthGainedLabel.Text = "Amount of strength gained in this server: " .. abbreviateNumber(strengthGained)
        labels.DurabilityGainedLabel.Text = "Amount of durability gained in this server: " .. abbreviateNumber(durabilityGained)
        labels.AgilityGainedLabel.Text = "Amount of agility gained in this server: " .. abbreviateNumber(agilityGained)
        labels.KillsGainedLabel.Text = "Amount of kills gained in this server: " .. abbreviateNumber(killsGained)
        labels.GoodKarmaGainedLabel.Text = "Amount of Good Karma gained in this server: " .. abbreviateNumber(goodKarmaGained)
        labels.BadKarmaGainedLabel.Text = "Amount of Bad Karma gained in this server: " .. abbreviateNumber(badKarmaGained)
    end

    -- Connect change events to update the labels when your stats change
    if leaderstats.Strength then
        leaderstats.Strength.Changed:Connect(updateLabels)
    end

    if player:FindFirstChild("Durability") then
        player.Durability.Changed:Connect(updateLabels)
    end

    if player:FindFirstChild("Agility") then
        player.Agility.Changed:Connect(updateLabels)
    end

    if leaderstats.Kills then
        leaderstats.Kills.Changed:Connect(updateLabels)
    end

    if player:FindFirstChild("goodKarma") then
        player.goodKarma.Changed:Connect(updateLabels)
    end

    if player:FindFirstChild("badKarma") then
        player.badKarma.Changed:Connect(updateLabels)
    end

    -- Initial update
    updateLabels()
end

-- Call the function to start tracking your own stats
createMyLabels()
