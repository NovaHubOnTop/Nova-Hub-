local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()

local window = library:AddWindow("Test1", {
	main_color = Color3.fromRGB(41, 74, 122), -- Color
	min_size = Vector2.new(650, 606), -- Size of the gui
	can_resize = false, -- true or false
})

local Killing = window:AddTab("Killing")

-- Create the dropdown for player whitelist
local whitelist = {}  -- Store the names of whitelisted players
local dropdown = Killing:AddDropdown("Whitelist", function(text)
    -- When a player is selected from the dropdown, add them to the whitelist
    print(text .. " selected!")
    table.insert(whitelist, text)
end)

-- Dynamically add player names to the dropdown
for _, player in ipairs(game.Players:GetPlayers()) do
    if player.Name ~= game.Players.LocalPlayer.Name then  -- Exclude the local player
        dropdown:Add(player.Name)  -- Add each player's name to the dropdown
    end
end

-- Create the textbox for unwhitelisting players
Killing:AddTextBox("Unwhitelist", function(text)
    -- If the entered name exists in the whitelist, remove it
    for i, whitelistedName in ipairs(whitelist) do
        if whitelistedName == text then
            table.remove(whitelist, i)  -- Remove the player from the whitelist
            print(text .. " has been unwhitelisted!")
            break
        end
    end
end)

-- Create the kill aura toggle
local switch = Killing:AddSwitch("Kill Aura", function(bool)
    if bool then
        -- Start the kill aura when toggle is enabled
        local player = game.Players.LocalPlayer
        local playerName = player.Name
        local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
        _G.autoPunchanim = true -- Global control variable

        while _G.autoPunchanim do
            if punchTool then
                -- Ensure the tool is equipped
                if punchTool.Parent ~= game.Workspace:FindFirstChild(playerName) then
                    punchTool.Parent = game.Workspace:FindFirstChild(playerName)
                end

                -- Fire the punch event for the player's own hands
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")

                -- Iterate over all players in the game
                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    if targetPlayer ~= player and not table.find(whitelist, targetPlayer.Name) then
                        -- Fire touch interest for each player's character, excluding whitelisted players
                        local targetCharacter = targetPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            -- Right Hand attack
                            local rightHand = player.Character:FindFirstChild("RightHand")
                            if rightHand then
                                local touchPart = targetCharacter.HumanoidRootPart
                                firetouchinterest(rightHand, touchPart, 0) -- Simulate touch with right hand
                                wait(0.1) -- Small delay before the next action
                                firetouchinterest(rightHand, touchPart, 1) -- Release touch
                            end

                            -- Left Hand attack
                            local leftHand = player.Character:FindFirstChild("LeftHand")
                            if leftHand then
                                local touchPart = targetCharacter.HumanoidRootPart
                                firetouchinterest(leftHand, touchPart, 0) -- Simulate touch with left hand
                                wait(0.1) -- Small delay before the next action
                                firetouchinterest(leftHand, touchPart, 1) -- Release touch
                            end
                        end
                    end
                end
                wait(1) -- Adjust the timing to avoid overloading server with too many hits
            else
                warn("Punch tool not found")
                _G.autoPunchanim = false -- Stop the loop if tool is not found
            end
        end
    else
        -- Stop the kill aura when toggle is disabled
        _G.autoPunchanim = false
    end
end)

local Player = window:AddTab("Player")

-- Create the "Select Player" dropdown
local playerDropdown = Player:AddDropdown("Select Player", function(playerName)
    -- Store the selected player's name in a variable
    selectedPlayerName = playerName
    print("Player selected: " .. selectedPlayerName)
end)

-- Dynamically add player names to the "Select Player" dropdown
for _, player in ipairs(game.Players:GetPlayers()) do
    if player.Name ~= game.Players.LocalPlayer.Name then  -- Exclude the local player
        playerDropdown:Add(player.Name)  -- Add each player's name to the dropdown
    end
end

-- Create the "View Player" toggle
local viewPlayerToggle = Player:AddSwitch("View Player", function(bool)
    local player = game.Players.LocalPlayer
    if bool and selectedPlayerName then
        -- Find the selected player
        local targetPlayer = game.Players:FindFirstChild(selectedPlayerName)
        
        if targetPlayer and targetPlayer.Character then
            -- Change the camera's subject to the selected player's character
            game.Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
            game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
            print("Viewing " .. selectedPlayerName)
        end
    else
        -- Revert the camera back to the local player
        game.Workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
        print("Reverted to own camera view")
    end
end)
