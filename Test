local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 400),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "scan-face" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "refresh-ccw" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "plus-circle" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "gem" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "asterisk" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })
Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Functions**
local toggleStates = {}  -- Define toggleStates to track toggle states

-- Function to infinitely equip the "Weight" tool
local function autoEquipWeight()
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Loop to equip the "Weight" tool while toggle is on
    task.spawn(function()
        while toggleStates["Auto Equip Weight"] do
            if backpack then
                local tool = backpack:FindFirstChild("Weight")
                if tool and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
            task.wait(0.1)
        end
    end)
end

-- Function to infinitely equip the "Pushups" tool
local function autoEquipPushups()
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Loop to equip the "Pushups" tool while toggle is on
    task.spawn(function()
        while toggleStates["Auto Equip Pushups"] do
            if backpack then
                local tool = backpack:FindFirstChild("Pushups")
                if tool and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
            task.wait(0.1)
        end
    end)
end

-- Function to infinitely equip the "Sit-ups" tool
local function autoEquipSitups()
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Loop to equip the "Sit-ups" tool while toggle is on
    task.spawn(function()
        while toggleStates["Auto Equip Situps"] do
            if backpack then
                local tool = backpack:FindFirstChild("Sit-ups")
                if tool and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
            task.wait(0.1)
        end
    end)
end

-- Function to infinitely equip the "Handstands" tool
local function autoEquipHandstands()
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")

    -- Loop to equip the "Handstands" tool while toggle is on
    task.spawn(function()
        while toggleStates["Auto Equip Handstands"] do
            if backpack then
                local tool = backpack:FindFirstChild("Handstand")
                if tool and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
            task.wait(0.1)
        end
    end)
end

Tabs.AutoFarm:AddParagraph({ Title = "Tools", Content = "" })

-- **Auto Equip Toggles**
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Weight"] = state
    if state then
        autoEquipWeight()  -- Start equipping Weight tool when toggle is on
    end
end)

Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Pushups"] = state
    if state then
        autoEquipPushups()  -- Start equipping Pushups tool when toggle is on
    end
end)

Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Situps"] = state
    if state then
        autoEquipSitups()  -- Start equipping Sit-ups tool when toggle is on
    end
end)

Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    toggleStates["Auto Equip Handstands"] = state
    if state then
        autoEquipHandstands()  -- Start equipping Handstand tool when toggle is on
    end
end)

-- **Rebirth Stats Paragraph**
local rebirthStats = Tabs.Rebirth:AddParagraph({
    Title = "Rebirth Stats",
    Content = "Amount Of Rebirth: 0\nAmount Of Rebirth Gained In Server: 0"
})

-- **Update Rebirth Stats Every 0.1 Seconds**
task.spawn(function()
    local initialRebirths = 0
    if leaderstats then
        local rebirths = leaderstats:FindFirstChild("Rebirths")
        if rebirths then
            initialRebirths = rebirths.Value
        end
    end

    while true do
        local currentRebirths = 0
        if leaderstats then
            local rebirths = leaderstats:FindFirstChild("Rebirths")
            if rebirths then
                currentRebirths = rebirths.Value
            end
        end

        local rebirthsGained = currentRebirths - initialRebirths
        rebirthStats:SetDesc("Amount Of Rebirth: " .. currentRebirths .. "\nAmount Of Rebirth Gained In Server: " .. rebirthsGained)

        task.wait(0.1)
    end
end)

-- **Auto Rebirth Toggle**
Tabs.Rebirth:AddToggle("Auto Rebirth (Infinitely)", { Title = "Auto Rebirth (Infinitely)", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

-- **Rebirth Target Textbox**
local rebirthTargetTextbox = Tabs.Rebirth:AddInput("Rebirth Target", {
    Title = "Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirth Amount",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

-- **Auto Rebirth Until Reach Target Amount Toggle**
Tabs.Rebirth:AddToggle("Auto Rebirth Until Reach Target Amount", { Title = "Auto Rebirth Until Reach Target Amount", Default = false }):OnChanged(function(state)
    if state then
        local targetRebirths = tonumber(rebirthTargetTextbox.Value) or 0
        task.spawn(function()
            while state do
                local currentRebirths = 0
                if leaderstats then
                    local rebirths = leaderstats:FindFirstChild("Rebirths")
                    if rebirths then
                        currentRebirths = rebirths.Value
                    end
                end
                
                if currentRebirths >= targetRebirths then
                    break
                end

                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
                task.wait(0.1)
            end
        end)
    end
end)

local Toggle = Tabs.Rebirth:AddToggle("Auto Set Size 2", {Title = "Auto Set Size 2", Default = false })

local autoSetSize2Running = false

Toggle:OnChanged(function(value)
    autoSetSize2Running = value
    while autoSetSize2Running do
        local args = {
            [1] = "changeSize",
            [2] = "2"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
        task.wait(0.1)
    end
end)

local AutoHidePetsToggle = false

-- Add Auto Hide Pets toggle
Tabs.Rebirth:AddToggle("Auto Hide Pets", {
    Title = "Auto Hide Pets",
    Description = "Toggles hiding or showing pets automatically.",
    Default = false,
    Callback = function(state)
        AutoHidePetsToggle = state
        if AutoHidePetsToggle then
            -- Continuously hide pets when enabled
            while AutoHidePetsToggle do
                local args = {
                    [1] = "hidePets"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("showPetsEvent"):FireServer(unpack(args))
                wait(0.1) -- Repeat every 0.1 seconds
            end
        else
            -- Show pets when toggled off
            local args = {
                [1] = "showPets"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("showPetsEvent"):FireServer(unpack(args))
        end
    end
})

-- **Auto Eat Protein Egg Every 30 Minutes**
Tabs.Rebirth:AddToggle("Auto Eat Protein Egg", { Title = "Auto Eat Protein Egg Every 30 Minutes", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    local tool = backpack:FindFirstChild("Protein Egg")
                    if tool then
                        player.Character.Humanoid:EquipTool(tool)
                        task.wait(0.5)
                        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                    end
                end

                for i = 1, 1800 do
                    if not state then break end
                    task.wait(1)
                end
            end
        end)
    end
end)

-- **Eat Every Protein Egg In Inventory**
Tabs.Rebirth:AddToggle("Eat Every Protein Eggs", { Title = "Eat Every Protein Eggs In Inventory", Default = false }):OnChanged(function(state)
    if state then
        task.spawn(function()
            while state do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Protein Egg" then
                            player.Character.Humanoid:EquipTool(tool)
                            task.wait(0.5)
                            game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                        end
                    end
                end
                task.wait(1)
            end
        end)
    end
end)

-- **Hide Frame Toggle**
Tabs.Rebirth:AddToggle("Hide Frame", { Title = "Hide Frame", Default = false }):OnChanged(function(state)
    local replicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Reference the frames in ReplicatedStorage
    local strengthFrame = replicatedStorage:FindFirstChild("strengthFrame")
    local durabilityFrame = replicatedStorage:FindFirstChild("durabilityFrame")
    local agilityFrame = replicatedStorage:FindFirstChild("agilityFrame")
    
    -- If the frames exist, toggle their visibility
    if strengthFrame then
        strengthFrame.Visible = not state  -- Set to false when on, true when off
    end
    if durabilityFrame then
        durabilityFrame.Visible = not state  -- Set to false when on, true when off
    end
    if agilityFrame then
        agilityFrame.Visible = not state  -- Set to false when on, true when off
    end
end)


-- Time Since Script Executed Paragraph
local TimeSinceExecutedParagraph = Tabs.Stats:AddParagraph({
    Title = "Time Since Script Executed",
    Content = "Hours: 0 Minutes: 0 Seconds: 0"
})

-- Select Target Dropdown
local Dropdown = Tabs.Stats:AddDropdown("Select Target", {
    Title = "Select Target",
    Values = {},  -- Start with an empty list
    Multi = false,
    Default = 1,
})

-- Target Stats Paragraph
local TargetStatsParagraph = Tabs.Stats:AddParagraph({
    Title = "Target Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0",
})

-- Your Stats Paragraph
local YourStatsParagraph = Tabs.Stats:AddParagraph({
    Title = "Your Stats",
    Content = "Amount Of Strength: 0\nAmount Of Durability: 0\nAmount Of Agility: 0\nAmount Of Kills: 0",
})

-- Function to abbreviate numbers for readability (K = Thousand, M = Million, B = Billion, QA = Quadrillion, T = Trillion)
local function abbreviateNumber(number)
    if number >= 1e15 then
        return string.format("%.1fQA", number / 1e15)  -- Quadrillion
    elseif number >= 1e12 then
        return string.format("%.1fT", number / 1e12)  -- Trillion
    elseif number >= 1e9 then
        return string.format("%.1fB", number / 1e9)   -- Billion
    elseif number >= 1e6 then
        return string.format("%.1fM", number / 1e6)   -- Million
    elseif number >= 1e3 then
        return string.format("%.1fK", number / 1e3)   -- Thousand
    else
        return tostring(number)  -- No abbreviation
    end
end

-- Update the "Your Stats" paragraph every 0.1 second
game:GetService("RunService").Heartbeat:Connect(function()
    local player = game.Players.LocalPlayer
    local leaderstats = player:FindFirstChild("leaderstats")
    local strength = leaderstats and leaderstats.Strength and leaderstats.Strength.Value or 0
    local durability = player:FindFirstChild("Durability") and player.Durability.Value or 0
    local agility = player:FindFirstChild("Agility") and player.Agility.Value or 0
    local kills = leaderstats and leaderstats.Kills and leaderstats.Kills.Value or 0

    -- Update the paragraph with your current stats using SetDesc
    if YourStatsParagraph then
        YourStatsParagraph:SetDesc(string.format([[
            Amount Of Strength: %s
            Amount Of Durability: %s
            Amount Of Agility: %s
            Amount Of Kills: %s
        ]], abbreviateNumber(strength), abbreviateNumber(durability), abbreviateNumber(agility), abbreviateNumber(kills)))
    end
end)

-- Function to update the dropdown with player names
local function updateDropdown()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end

    -- Safely set values if the dropdown allows it
    if Dropdown and Dropdown.SetValues then
        Dropdown:SetValues(playerNames)
    else
        warn("Dropdown:SetValues method not available...")
    end
end

-- Update the dropdown every 1 second to keep player list current
game:GetService("RunService").Heartbeat:Connect(function()
    updateDropdown()
end)

local locations = {
    {"Tiny Island", Vector3.new(-38, 5, 1884)},
    {"Frost Island", Vector3.new(-2623, 5, -409)},
    {"Mythical Island", Vector3.new(2251, 5, 1073)},
    {"Inferno Island", Vector3.new(-6759, 5, -1285)},
    {"Legends Island", Vector3.new(4603, 989, -3898)},
    {"Muscle King Gym", Vector3.new(-8626, 15, -5730)},
    {"Jungle Island", CFrame.new(-8708.55078, 0.459242582, 2348.60693, 0.422563195, 0.906333447, -9.83476639e-07, 9.83476639e-07, -1.54972076e-06, -1, -0.906333447, 0.422563195, -1.54972076e-06)},
    {"Beach", Vector3.new(-11, 5, -178)}
}

-- Create buttons for each location
for _, location in ipairs(locations) do
    local name, position = location[1], location[2]
    Tabs.Teleport:AddButton({
        Title = name,
        Description = "Teleport to " .. name,
        Callback = function()
            local player = game:GetService("Players").LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if typeof(position) == "CFrame" then
                    player.Character.HumanoidRootPart.CFrame = position
                else
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
                end
            end
        end
    })
end

-- Create Select Player dropdown
local function getOtherPlayers()
    local players = {}
    local localPlayer = game:GetService("Players").LocalPlayer
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player ~= localPlayer then
            table.insert(players, player.Name)
        end
    end
    return players
end

local playerList = getOtherPlayers()
local Dropdown = Tabs.Teleport:AddDropdown("Select Player", {
    Title = "Select Player",
    Values = playerList,
    Multi = false,
    Default = playerList[1] or "",
})

-- Teleport to selected player button
Tabs.Teleport:AddButton({
    Title = "Teleport To Player",
    Description = "Teleport to the selected player",
    Callback = function()
        local selectedPlayer = Dropdown.Value
        local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayer)
        
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local localPlayer = game:GetService("Players").LocalPlayer
            if localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                localPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            end
        end
    end
})

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AntiKickToggle = false
local Connection

Tabs.Misc:AddToggle("Anti Kick", {
    Title = "Anti Kick",
    Description = "Prevents getting kicked for being idle",
    Default = false,
    Callback = function(state)
        AntiKickToggle = state
        if AntiKickToggle then
            Connection = LocalPlayer.Idled:Connect(function()
                UserInputService:InputBegan(Enum.UserInputType.MouseMovement)
            end)
        else
            if Connection then
                Connection:Disconnect()
                Connection = nil
            end
        end
    end
})

local AntiPingToggle = false
local fps = 0
local lastTime = tick()

local function getPing()
    local player = game.Players.LocalPlayer
    local ping = player:GetNetworkPing() * 1000 -- Convert to milliseconds
    return math.floor(ping)
end

local function checkPerformance()
    -- FPS Checker
    fps = math.floor(1 / (tick() - lastTime))
    lastTime = tick()

    -- Ping Checker
    local ping = getPing()

    -- Optional: Auto-adjust label colors based on performance
    if fps < 30 then
        -- Handle low FPS logic, e.g., disable certain features or optimize actions
    else
        -- Handle good FPS logic
    end

    if ping > 200 then
        -- Handle high ping logic, e.g., warn player or optimize actions
    else
        -- Handle good ping logic
    end
end

Tabs.Misc:AddToggle("Anti Ping", {
    Title = "Anti Ping",
    Description = "Prevents ping spikes and improves performance",
    Default = false,
    Callback = function(state)
        AntiPingToggle = state
        if AntiPingToggle then
            -- Continuously check FPS and Ping
            game:GetService("RunService").RenderStepped:Connect(checkPerformance)
            game:GetService("RunService").Stepped:Connect(checkPerformance)
        else
            -- Stop checking when Anti Ping is turned off
        end
    end
})

local AntiLagToggle = false

-- Define the assets and effects to disable
local ToDisable = {
    Textures = true,
    VisualEffects = true,
    Parts = true,
    Particles = true,
    Sky = true
}

local ToEnable = {
    FullBright = false
}

-- Store the original properties for restoration
local Stuff = {}

-- Function to disable assets and effects
local function disableEffects()
    for _, v in next, game:GetDescendants() do
        if ToDisable.Parts then
            if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
                table.insert(Stuff, v)
            end
        end
        
        if ToDisable.Particles then
            if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
                v.Enabled = false
                table.insert(Stuff, v)
            end
        end
        
        if ToDisable.VisualEffects then
            if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
                v.Enabled = false
                table.insert(Stuff, v)
            end
        end
        
        if ToDisable.Textures then
            if v:IsA("Decal") or v:IsA("Texture") then
                v.Texture = ""
                table.insert(Stuff, v)
            end
        end
        
        if ToDisable.Sky then
            if v:IsA("Sky") then
                v.Parent = nil
                table.insert(Stuff, v)
            end
        end
    end
    
    -- Apply fullbright if enabled
    if ToEnable.FullBright then
        local Lighting = game:GetService("Lighting")
        
        Lighting.FogColor = Color3.fromRGB(255, 255, 255)
        Lighting.FogEnd = math.huge
        Lighting.FogStart = math.huge
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.Brightness = 5
        Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
        Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        Lighting.Outlines = true
    end
end

-- Function to restore the original state
local function restoreEffects()
    for _, v in next, Stuff do
        if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
            v.Material = Enum.Material.SmoothPlastic -- Revert material (you can store and restore original properties)
        end
        
        if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
            v.Enabled = true
        end
        
        if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
            v.Enabled = true
        end
        
        if v:IsA("Decal") or v:IsA("Texture") then
            v.Texture = "" -- Restore original texture (you can store and restore the original texture)
        end
        
        if v:IsA("Sky") then
            v.Parent = game:GetService("Lighting") -- Restore Sky object
        end
    end

    -- Reset fullbright settings
    local Lighting = game:GetService("Lighting")
    Lighting.FogColor = Color3.fromRGB(213, 213, 213)
    Lighting.FogEnd = 100000
    Lighting.FogStart = 0
    Lighting.Ambient = Color3.fromRGB(128, 128, 128)
    Lighting.Brightness = 2
    Lighting.ColorShift_Bottom = Color3.fromRGB(128, 128, 128)
    Lighting.ColorShift_Top = Color3.fromRGB(128, 128, 128)
    Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
    Lighting.Outlines = false
end

-- Add Anti Lag toggle
Tabs.Misc:AddToggle("Anti Lag", {
    Title = "Anti Lag",
    Description = "Reduces lag by disabling effects",
    Default = false,
    Callback = function(state)
        AntiLagToggle = state
        if AntiLagToggle then
            -- Disable effects when Anti Lag is enabled
            disableEffects()
        else
            -- Restore original state when Anti Lag is disabled
            restoreEffects()
        end
    end
})

local LockPositionToggle = false
local lockedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

-- Add Lock Position toggle
Tabs.Misc:AddToggle("Lock Position", {
    Title = "Lock Position",
    Description = "Locks your position in place",
    Default = false,
    Callback = function(state)
        LockPositionToggle = state
        if LockPositionToggle then
            -- Lock the avatar's position
            while LockPositionToggle do
                local humanoidRootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = CFrame.new(lockedPosition)  -- Keep the avatar in the locked position
                wait(0.1)  -- Continuously check every 0.1 seconds
            end
        end
    end
})

-- Reset position lock when toggled off
game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Changed:Connect(function()
    if not LockPositionToggle then
        lockedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    end
end)

local ZoomBypassToggle = false

-- Add Zoom Bypasser toggle
Tabs.Misc:AddToggle("Zoom Bypasser", {
    Title = "Zoom Bypasser",
    Description = "Bypasses the zoom limit",
    Default = false,
    Callback = function(state)
        ZoomBypassToggle = state
        local camera = game:GetService("Workspace").CurrentCamera
        if ZoomBypassToggle then
            -- Set the CameraMaxZoomDistance to bypass the zoom limit
            camera.CameraMaxZoomDistance = math.huge  -- Removes the zoom limit
            camera.FieldOfView = 120  -- You can set this to your preferred FOV value for zoom
        else
            -- Reset back to default settings when the toggle is off
            camera.CameraMaxZoomDistance = 100  -- Reset to default zoom limit
            camera.FieldOfView = 70  -- Reset FOV to the default setting (or any default you prefer)
        end
    end
})

local AutoSpinWheelToggle = false

local crystals = {
    "Blue Crystal", "Green Crystal", "Frozen Crystal", "Mythical Crystal",
    "Inferno Crystal", "Legends Crystal", "Muscle Elite Crystal",
    "Galaxy Oracle Crystal", "Sky Eclipse Crystal", "Jungle Crystal"
}

local Dropdown = Tabs.Crystal:AddDropdown("Select Crystal", {
    Title = "Select Crystal",
    Values = crystals,
    Multi = false,
    Default = crystals[1] or "",
})

local AutoCrystalToggle = false

Tabs.Crystal:AddToggle("Auto Crystal", {
    Title = "Auto Crystal",
    Description = "Automatically open selected crystal",
    Default = false,
    Callback = function(state)
        AutoCrystalToggle = state
        while AutoCrystalToggle do
            local selectedCrystal = Dropdown.Value
            if selectedCrystal then
                local args = {
                    [1] = "openCrystal",
                    [2] = selectedCrystal
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
            end
            wait(1)  -- Repeat every second
        end
    end
})
