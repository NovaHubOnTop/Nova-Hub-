local NovaHub = loadstring(game:HttpGet("https://pastebin.com/raw/Rne8BmfA"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = NovaHub:CreateWindow({
    Title = "Muscle Legend Private Script" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "NovaHub",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "" }),
    Crystal = Window:AddTab({ Title = "Crystal", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- **Main Tab**
Tabs.Main:AddParagraph({ Title = "Server Invite", Content = "" })

Tabs.Main:AddButton({
    Title = "Discord Server",
    Description = "Copy discord server link",
    Callback = function()
        setclipboard("https://discord.gg/ztGskBVU")
    end
})

-- **WalkSpeed Input**
local WalkSpeedInput = Tabs.Main:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16",
    Placeholder = "Enter WalkSpeed",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- **JumpPower Input**
local JumpPowerInput = Tabs.Main:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50",
    Placeholder = "Enter JumpPower",
    Numeric = true,
    Finished = true,
    Callback = function(Value) end
})

Tabs.Main:AddButton({
    Title = "Apply JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- **Auto Reps Toggle**
local autoReps = false
Tabs.AutoFarm:AddToggle("Auto Reps", { Title = "Auto Reps", Default = false }):OnChanged(function(state)
    autoReps = state
    while autoReps do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.1)
    end
end)

-- **Auto Equip Tool Function**
local function autoEquipTool(toolName, stateVariable)
    while stateVariable do
        local player = game.Players.LocalPlayer
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
        task.wait(0.1)
    end
end

-- **Auto Equip Toggles**
local autoWeight = false
Tabs.AutoFarm:AddToggle("Auto Equip Weight", { Title = "Auto Equip Weight", Default = false }):OnChanged(function(state)
    autoWeight = state
    autoEquipTool("Weight", autoWeight)
end)

local autoPushups = false
Tabs.AutoFarm:AddToggle("Auto Equip Pushups", { Title = "Auto Equip Pushups", Default = false }):OnChanged(function(state)
    autoPushups = state
    autoEquipTool("Pushups", autoPushups)
end)

local autoSitups = false
Tabs.AutoFarm:AddToggle("Auto Equip Situps", { Title = "Auto Equip Situps", Default = false }):OnChanged(function(state)
    autoSitups = state
    autoEquipTool("Sit-ups", autoSitups)
end)

local autoHandstands = false
Tabs.AutoFarm:AddToggle("Auto Equip Handstands", { Title = "Auto Equip Handstands", Default = false }):OnChanged(function(state)
    autoHandstands = state
    autoEquipTool("Handstand", autoHandstands)
end)

local autoRebirth = false
local rebirthUntilTarget = false
local targetRebirths = 0

-- Auto Rebirth Toggle
Tabs.Rebirth:AddToggle("Auto Rebirth", { Title = "Auto Rebirth", Default = false })
:OnChanged(function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

-- Input Field for Target Rebirth Amount
local Input = Tabs.Rebirth:AddInput("Select Rebirth Target", {
    Title = "Select Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        targetRebirths = tonumber(Value) or 0
        print("Target rebirths set to:", targetRebirths)
    end
})

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle("Rebirth Until Target Amount", { Title = "Rebirth Until Target Amount", Default = false })
:OnChanged(function(state)
    rebirthUntilTarget = state
    while rebirthUntilTarget do
        -- Get the player's leaderstats
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local currentRebirths = leaderstats:FindFirstChild("Rebirths")
            if currentRebirths then
                -- Stop when reaching the target rebirths
                if currentRebirths.Value >= targetRebirths then
                    rebirthUntilTarget = false
                    print("Target rebirth amount reached!")
                    break
                end

                -- Perform the rebirth
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end
        task.wait(0.1)
    end
end)

local selectedCrystal = "Blue Crystal"  -- Default selected crystal

-- Dropdown for selecting crystal
local Dropdown = Tabs.Crystal:AddDropdown("Select Crystal", {
    Title = "Select Crystal",
    Values = {"Blue Crystal", "Green Crystal", "Frozen Crystal", "Mythical Crystal", 
              "Inferno Crystal", "Legends Crystal", "Muscle Elite Crystal", 
              "Galaxy Oracle Crystal", "Sky Eclipse Crystal", "Jungle Crystal"},
    Multi = false,
    Default = 1,
})

-- Set default crystal value
Dropdown:SetValue("Blue Crystal")

-- Dropdown change handler
Dropdown:OnChanged(function(Value)
    selectedCrystal = Value
    print("Dropdown changed:", selectedCrystal)
end)

-- Auto Crystal Toggle
local Toggle = Tabs.Crystal:AddToggle("Auto Crystal", {Title = "Auto Crystal", Default = false})

-- Toggle change handler
Toggle:OnChanged(function(state)
    if state then
        -- Execute the crystal opening when Auto Crystal is enabled
        local args = {
            [1] = "openCrystal",
            [2] = selectedCrystal  -- Use the selected crystal from dropdown
        }
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
        print("Opening crystal:", selectedCrystal)
        
        while state do
            -- Repeatedly open the selected crystal every 0.1 seconds
            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
            task.wait(0.1)
        end
    end
end)

local whitelist = {}
local allPlayers = {}  -- To store all players in the server for dropdowns and actions

-- Function to update player lists
local function updatePlayerLists()
    allPlayers = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(allPlayers, player.Name)
    end
end

-- Whitelist Dropdown
Tabs.Killing:AddDropdown("Whitelist", {
    Title = "Whitelist",
    Values = allPlayers,  -- Populate with player names
    Multi = true,
    Default = {"three"},
}):OnChanged(function(Value)
    whitelist = Value
end)

-- Auto Kill Toggle
local autoKillEnabled = false
local selectedTarget = nil
Tabs.Killing:AddToggle("Auto Kill", { Title = "Auto Kill", Default = false }):OnChanged(function(state)
    autoKillEnabled = state
    if state then
        local player = game.Players.LocalPlayer
        local playerName = player.Name
        local punchTool =
            player.Backpack:FindFirstChild("Punch") or
            game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
        local _GautoPunchanim = true -- Localizing global control variable

        while _GautoPunchanim do
            for _, target in pairs(game.Players:GetPlayers()) do
                -- Only target players not in the whitelist
                if not table.find(whitelist, target.Name) then
                    local hitbox = punchTool:FindFirstChild("Hitbox") -- Adjust if needed for the Punch tool's hitbox
                    if hitbox then
                        -- Use firetouchinterest to hit all other players
                        firetouchinterest(hitbox, target.Character.HumanoidRootPart, 0)
                    end
                end
            end
            game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
            game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
            task.wait() -- Adjust the delay as needed for timing between punches
        end
    else
        _GautoPunchanim = false
    end
end)

-- Kill Target Toggle
local killTargetEnabled = false
Tabs.Killing:AddToggle("Kill Target", { Title = "Kill Target", Default = false }):OnChanged(function(state)
    killTargetEnabled = state
    if state then
        local player = game.Players.LocalPlayer
        local playerName = player.Name
        local punchTool =
            player.Backpack:FindFirstChild("Punch") or
            game.Workspace:FindFirstChild(playerName):FindFirstChild("Punch")
        local _GautoPunchanim = true -- Localizing global control variable

        while _GautoPunchanim do
            if selectedTarget then
                local targetPlayer = game.Players:FindFirstChild(selectedTarget)
                if targetPlayer then
                    local hitbox = punchTool:FindFirstChild("Hitbox") -- Adjust if needed for the Punch tool's hitbox
                    if hitbox then
                        -- Use firetouchinterest to target the selected player
                        firetouchinterest(hitbox, targetPlayer.Character.HumanoidRootPart, 0)
                    end
                end
            end
            game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
            game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
            task.wait() -- Adjust the delay as needed for timing between punches
        end
    else
        _GautoPunchanim = false
    end
end)

-- Update player lists when the game starts or when a player joins
game.Players.PlayerAdded:Connect(updatePlayerLists)
game.Players.PlayerRemoving:Connect(updatePlayerLists)
